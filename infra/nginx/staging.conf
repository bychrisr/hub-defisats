events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging (Staging - more verbose)
    log_format staging '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" '
                      'rt=$request_time uct="$upstream_connect_time" '
                      'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/staging_access.log staging;
    error_log /var/log/nginx/staging_error.log debug;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting (Staging - more permissive)
    limit_req_zone $binary_remote_addr zone=api_staging:10m rate=20r/s;
    limit_req_zone $binary_remote_addr zone=login_staging:10m rate=10r/m;

    # Security headers (Staging - less restrictive for testing)
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline' 'unsafe-eval'" always;

    # Upstream for backend (Staging)
    upstream backend_staging {
        server backend-staging:3010;   # Nome do serviço no docker-compose staging
    }

    # Upstream for frontend (Staging)
    upstream frontend_staging {
        server frontend-staging:80;    # Nome do serviço no docker-compose staging
    }

    # Main server block - HTTP only (SSL handled by global proxy)
    server {
        listen 80;
        server_name _;         # Aceita qualquer Host

        # API routes (Staging)
        location /api/ {
            limit_req zone=api_staging burst=50 nodelay;
            
            proxy_pass http://backend_staging;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts (Staging - more permissive)
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Add staging headers
            add_header X-Environment "staging" always;
        }

        # Auth routes with less strict rate limiting (Staging)
        location /api/auth/ {
            limit_req zone=login_staging burst=20 nodelay;
            
            proxy_pass http://backend_staging;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Add staging headers
            add_header X-Environment "staging" always;
        }

        # Health check (Staging)
        location /health {
            proxy_pass http://backend_staging;
            access_log off;
            add_header X-Environment "staging" always;
        }

        # Frontend routes (Staging)
        location / {
            proxy_pass http://frontend_staging;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Add staging headers
            add_header X-Environment "staging" always;
        }

        # Security (Staging - less restrictive)
        location ~ /\. {
            deny all;
        }

        # Block access to sensitive files
        location ~* \.(env|log|sql)$ {
            deny all;
        }

        # Allow access to staging-specific files
        location ~* \.(staging|test)\.(js|css|html)$ {
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header X-Environment "staging" always;
        }
    }
}
