name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'

jobs:
  # Backend Tests
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: hubdefisats_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Generate Prisma client
      working-directory: ./backend
      run: npx prisma generate

    - name: Run database migrations
      working-directory: ./backend
      run: npx prisma db push
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/hubdefisats_test

    - name: Run backend tests
      working-directory: ./backend
      run: npm run test:all
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/hubdefisats_test
        REDIS_URL: redis://localhost:6379
        NODE_ENV: test
        JWT_SECRET: test-jwt-secret
        ENCRYPTION_KEY: test-encryption-key-32-chars

    - name: Run backend security tests
      working-directory: ./backend
      run: npm run test:security
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/hubdefisats_test
        REDIS_URL: redis://localhost:6379
        NODE_ENV: test
        JWT_SECRET: test-jwt-secret
        ENCRYPTION_KEY: test-encryption-key-32-chars

    - name: Run backend performance tests
      working-directory: ./backend
      run: npm run test:performance
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/hubdefisats_test
        REDIS_URL: redis://localhost:6379
        NODE_ENV: test
        JWT_SECRET: test-jwt-secret
        ENCRYPTION_KEY: test-encryption-key-32-chars

  # Frontend Tests
  frontend-tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run frontend tests
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false

    - name: Run frontend linting
      working-directory: ./frontend
      run: npm run lint

    - name: Run frontend type checking
      working-directory: ./frontend
      run: npm run type-check

  # Build and Test Docker Images
  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile.dev
        push: false
        tags: hub-defisats-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile.dev
        push: false
        tags: hub-defisats-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Code Quality
  code-quality:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: Run ESLint
      run: |
        cd backend && npm run lint
        cd ../frontend && npm run lint

    - name: Run Prettier
      run: |
        cd backend && npm run format:check
        cd ../frontend && npm run format:check

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, docker-build, security-scan, code-quality]
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: kubectl apply -f k8s/staging/

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, docker-build, security-scan, code-quality]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: kubectl apply -f k8s/production/

  # Notify on failure
  notify-failure:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, docker-build, security-scan, code-quality]
    if: failure()

    steps:
    - name: Notify on failure
      run: |
        echo "CI/CD pipeline failed. Please check the logs."
        # Add your notification logic here (Slack, Discord, email, etc.)
