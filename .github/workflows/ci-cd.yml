name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE: ghcr.io/${{ github.repository }}/backend
  FRONTEND_IMAGE: ghcr.io/${{ github.repository }}/frontend

jobs:
  # Security and Quality Checks
  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'Hub DefiSats'
          path: '.'
          format: 'ALL'

  # Backend Tests and Build
  backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: |
          cd backend
          npm ci

      - name: Run linting
        run: |
          cd backend
          npm run lint

      - name: Run type checking
        run: |
          cd backend
          npm run build

      - name: Run unit tests
        run: |
          cd backend
          npm test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/hub_defisats_test
          REDIS_URL: redis://localhost:6379

      - name: Setup test database
        run: |
          cd backend
          npx prisma migrate deploy
          npx prisma db push
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/hub_defisats_test

      - name: Build backend Docker image
        run: |
          docker build -t ${{ env.BACKEND_IMAGE }}:latest ./backend
          docker build -t ${{ env.BACKEND_IMAGE }}:${{ github.sha }} ./backend

      - name: Upload backend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: |
            backend/dist/
            backend/package.json
            backend/package-lock.json

  # Frontend Tests and Build
  frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run linting
        run: |
          cd frontend
          npm run lint

      - name: Run type checking
        run: |
          cd frontend
          npm run build

      - name: Build frontend Docker image
        run: |
          docker build -t ${{ env.FRONTEND_IMAGE }}:latest ./frontend
          docker build -t ${{ env.FRONTEND_IMAGE }}:${{ github.sha }} ./frontend

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: |
            frontend/dist/
            frontend/package.json
            frontend/package-lock.json

  # E2E Tests
  e2e:
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download backend build
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: backend/dist/

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Playwright
        run: |
          cd backend
          npm install @playwright/test
          npx playwright install

      - name: Setup test database
        run: |
          cd backend
          npx prisma migrate deploy
          npx prisma db push
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/hub_defisats_test

      - name: Run E2E tests
        run: |
          cd backend
          npm run test:e2e
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/hub_defisats_test
          REDIS_URL: redis://localhost:6379

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            backend/test-results/
            backend/playwright-report/

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [backend, frontend, e2e]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend image
        run: |
          docker build -t ${{ env.BACKEND_IMAGE }}:staging ./backend
          docker push ${{ env.BACKEND_IMAGE }}:staging

      - name: Build and push frontend image
        run: |
          docker build -t ${{ env.FRONTEND_IMAGE }}:staging ./frontend
          docker push ${{ env.FRONTEND_IMAGE }}:staging

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: kubectl apply -f k8s/staging/

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [backend, frontend, e2e]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend image
        run: |
          docker build -t ${{ env.BACKEND_IMAGE }}:latest ./backend
          docker build -t ${{ env.BACKEND_IMAGE }}:${{ github.sha }} ./backend
          docker push ${{ env.BACKEND_IMAGE }}:latest
          docker push ${{ env.BACKEND_IMAGE }}:${{ github.sha }}

      - name: Build and push frontend image
        run: |
          docker build -t ${{ env.FRONTEND_IMAGE }}:latest ./frontend
          docker build -t ${{ env.FRONTEND_IMAGE }}:${{ github.sha }} ./frontend
          docker push ${{ env.FRONTEND_IMAGE }}:latest
          docker push ${{ env.FRONTEND_IMAGE }}:${{ github.sha }}

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # Example: kubectl apply -f k8s/production/

      - name: Create GitHub release
        if: github.event_name == 'push'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.sha }}
          release_name: Release ${{ github.sha }}
          body: |
            ## Changes
            ${{ github.event.head_commit.message }}

            ## Deployment
            - Backend: ${{ env.BACKEND_IMAGE }}:${{ github.sha }}
            - Frontend: ${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
          draft: false
          prerelease: false