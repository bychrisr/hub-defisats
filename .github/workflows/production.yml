name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: hubdefisats_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Run backend tests
        run: |
          cd backend
          npm run test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/hubdefisats_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret
          JWT_REFRESH_SECRET: test_refresh_secret

      - name: Run frontend tests
        run: |
          cd frontend
          npm run test

      - name: Run security audit
        run: |
          cd backend && npm audit --audit-level moderate
          cd ../frontend && npm audit --audit-level moderate

      - name: Build applications
        run: |
          cd backend && npm run build
          cd ../frontend && npm run build

  deploy-production:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

      - name: Pre-deployment backup
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@defisats.site << 'EOF'
            # Backup database
            sudo -u postgres pg_dump hubdefisats_prod > /home/ubuntu/backups/db_backup_$(date +%Y%m%d_%H%M%S).sql
            
            # Backup application files
            sudo tar -czf /home/ubuntu/backups/app_backup_$(date +%Y%m%d_%H%M%S).tar.gz /var/www/hub-defisats/
          EOF

      - name: Deploy to production server
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@defisats.site << 'EOF'
            cd /home/ubuntu/apps/hub-defisats-production
            git pull origin main
            ./scripts/deploy-production.sh
          EOF

      - name: Health check production
        run: |
          sleep 30
          curl -f https://defisats.site/health || exit 1

      - name: Verify deployment
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@defisats.site << 'EOF'
            # Check PM2 status
            pm2 status
            
            # Check logs for errors
            pm2 logs --lines 50 --err
          EOF

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Production deployment successful for commit ${{ github.sha }}"
          echo "🌐 Production URL: https://defisats.site"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "❌ Production deployment failed for commit ${{ github.sha }}"
          echo "🔄 Consider rolling back using the backup created"
