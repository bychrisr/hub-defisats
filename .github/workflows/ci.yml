name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: hubdefisats
          POSTGRES_PASSWORD: hubdefisats_test_password
          POSTGRES_DB: hubdefisats_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      working-directory: ./backend
      run: npm ci

    - name: Generate Prisma client
      working-directory: ./backend
      run: npx prisma generate

    - name: Run database migrations
      working-directory: ./backend
      run: npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://hubdefisats:hubdefisats_test_password@localhost:5432/hubdefisats_test?schema=public

    - name: Run linting
      working-directory: ./backend
      run: npm run lint

    - name: Run type checking
      working-directory: ./backend
      run: npm run type-check

    - name: Run unit tests
      working-directory: ./backend
      run: npm run test:unit
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://hubdefisats:hubdefisats_test_password@localhost:5432/hubdefisats_test?schema=public
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-jwt-secret-key-32-chars-minimum
        REFRESH_TOKEN_SECRET: test-refresh-secret-key-32-chars-minimum
        ENCRYPTION_KEY: test-encryption-key-32-chars

    - name: Run integration tests
      working-directory: ./backend
      run: npm run test:integration
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://hubdefisats:hubdefisats_test_password@localhost:5432/hubdefisats_test?schema=public
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-jwt-secret-key-32-chars-minimum
        REFRESH_TOKEN_SECRET: test-refresh-secret-key-32-chars-minimum
        ENCRYPTION_KEY: test-encryption-key-32-chars

    - name: Run E2E tests
      working-directory: ./backend
      run: npm run test:e2e
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://hubdefisats:hubdefisats_test_password@localhost:5432/hubdefisats_test?schema=public
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-jwt-secret-key-32-chars-minimum
        REFRESH_TOKEN_SECRET: test-refresh-secret-key-32-chars-minimum
        ENCRYPTION_KEY: test-encryption-key-32-chars

    - name: Run security tests
      working-directory: ./backend
      run: npm run test:security
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://hubdefisats:hubdefisats_test_password@localhost:5432/hubdefisats_test?schema=public
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-jwt-secret-key-32-chars-minimum
        REFRESH_TOKEN_SECRET: test-refresh-secret-key-32-chars-minimum
        ENCRYPTION_KEY: test-encryption-key-32-chars

    - name: Run performance tests
      working-directory: ./backend
      run: npm run test:performance
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://hubdefisats:hubdefisats_test_password@localhost:5432/hubdefisats_test?schema=public
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-jwt-secret-key-32-chars-minimum
        REFRESH_TOKEN_SECRET: test-refresh-secret-key-32-chars-minimum
        ENCRYPTION_KEY: test-encryption-key-32-chars

    - name: Run load tests
      working-directory: ./backend
      run: npm run test:load
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://hubdefisats:hubdefisats_test_password@localhost:5432/hubdefisats_test?schema=public
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-jwt-secret-key-32-chars-minimum
        REFRESH_TOKEN_SECRET: test-refresh-secret-key-32-chars-minimum
        ENCRYPTION_KEY: test-encryption-key-32-chars

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: backend/coverage/
        retention-days: 30

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      working-directory: ./backend
      run: npm ci

    - name: Run security audit
      working-directory: ./backend
      run: npm audit --audit-level moderate

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  build:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      working-directory: ./backend
      run: npm ci

    - name: Build application
      working-directory: ./backend
      run: npm run build

    - name: Build Docker image
      run: |
        cd backend
        docker build -f Dockerfile.prod -t hub-defisats/backend:${{ github.sha }} .
        docker tag hub-defisats/backend:${{ github.sha }} hub-defisats/backend:latest

    - name: Test Docker image
      run: |
        docker run --rm -d --name test-container -p 13016:13016 \
          -e NODE_ENV=test \
          -e DATABASE_URL=postgresql://test:test@localhost:5432/test \
          -e REDIS_URL=redis://localhost:6379 \
          -e JWT_SECRET=test-jwt-secret-key-32-chars-minimum \
          -e REFRESH_TOKEN_SECRET=test-refresh-secret-key-32-chars-minimum \
          -e ENCRYPTION_KEY=test-encryption-key-32-chars \
          hub-defisats/backend:latest
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:13016/health || exit 1
        
        # Clean up
        docker stop test-container

    - name: Upload Docker image
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
        docker push hub-defisats/backend:${{ github.sha }}
        docker push hub-defisats/backend:latest

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to Kubernetes
      run: |
        export KUBECONFIG=kubeconfig
        
        # Update image tag in deployment
        sed -i "s|hub-defisats/backend:latest|hub-defisats/backend:${{ github.sha }}|g" k8s/backend-deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/secret.yaml
        kubectl apply -f k8s/backend-deployment.yaml
        kubectl apply -f k8s/backend-service.yaml
        kubectl apply -f k8s/backend-hpa.yaml
        
        # Wait for deployment to be ready
        kubectl rollout status deployment/hub-defisats-backend -n hub-defisats --timeout=300s

    - name: Run smoke tests
      run: |
        export KUBECONFIG=kubeconfig
        
        # Get service URL
        SERVICE_URL=$(kubectl get service hub-defisats-backend-service -n hub-defisats -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        # Wait for service to be available
        sleep 30
        
        # Run smoke tests
        curl -f http://$SERVICE_URL/health || exit 1
        curl -f http://$SERVICE_URL/metrics || exit 1

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        text: 'üöÄ Hub DefiSATS backend deployed successfully!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy]
    if: failure()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Rollback deployment
      run: |
        export KUBECONFIG=kubeconfig
        kubectl rollout undo deployment/hub-defisats-backend -n hub-defisats

    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#deployments'
        text: '‚ö†Ô∏è Hub DefiSATS backend deployment failed and was rolled back!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}