import { useState, useEffect, useCallback } from 'react';
import { useAuthStore } from '@/stores/auth';
import { api } from '@/lib/api';
import { useWebSocket } from './useWebSocket';

interface DashboardData {
  user: any;
  balance: any;
  positions: any[];
  estimatedBalance: any;
  marketIndex: any;
  deposits: any[];
  withdrawals: any[];
  lastUpdate: number;
  cacheHit: boolean;
}

interface UseOptimizedDashboardDataReturn {
  data: DashboardData | null;
  isLoading: boolean;
  error: string | null;
  refresh: () => Promise<void>;
  lastUpdate: number | null;
  cacheHit: boolean;
}

/**
 * Hook otimizado para dados da dashboard
 * Aproveita o endpoint unificado e cache de credenciais implementados no roadmap
 */
export const useOptimizedDashboardData = (): UseOptimizedDashboardDataReturn => {
  const { isAuthenticated, user } = useAuthStore();
  const [data, setData] = useState<DashboardData | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [lastUpdate, setLastUpdate] = useState<number | null>(null);
  const [cacheHit, setCacheHit] = useState(false);

  // Verificar se √© admin
  const isAdmin = user?.is_admin || false;

  const fetchDashboardData = useCallback(async () => {
    if (!isAuthenticated || !user?.id) {
      console.log('üîç OPTIMIZED DASHBOARD - User not authenticated, skipping...');
      return;
    }

    // Log para debug
    console.log('üîç OPTIMIZED DASHBOARD - User authenticated:', {
      userId: user.id,
      isAdmin: isAdmin,
      email: user.email,
      token: localStorage.getItem('access_token') ? 'EXISTS' : 'MISSING'
    });

    try {
      setIsLoading(true);
      setError(null);

      console.log('üöÄ OPTIMIZED DASHBOARD - Fetching unified dashboard data...');
      const startTime = Date.now();

      // Uma √∫nica chamada para todos os dados (otimiza√ß√£o principal)
      const response = await api.get('/api/lnmarkets-robust/dashboard');
      const dashboardData = response.data;

      const endTime = Date.now();
      const duration = endTime - startTime;

      if (dashboardData.success && dashboardData.data) {
        console.log(`‚úÖ OPTIMIZED DASHBOARD - Data received in ${duration}ms (API v2):`, {
          positions: dashboardData.data.positions?.length || 0,
          deposits: dashboardData.data.deposits?.length || 0,
          withdrawals: dashboardData.data.withdrawals?.length || 0,
          marketIndex: dashboardData.data.marketIndex ? 'present' : 'null',
          cacheHit: dashboardData.data.cacheHit,
          duration: `${duration}ms`,
          fullData: dashboardData.data // üîç DEBUG: Log completo dos dados
        });


        setData(dashboardData.data);
        setLastUpdate(dashboardData.data.lastUpdate);
        setCacheHit(dashboardData.data.cacheHit);
      } else {
        throw new Error('Invalid response format');
      }
    } catch (err: any) {
      console.error('‚ùå OPTIMIZED DASHBOARD - Error:', err);
      
      // Tratamento de erro baseado no roadmap
      if (err.response?.data?.error === 'MISSING_CREDENTIALS') {
        setError('LN Markets credentials not configured');
      } else if (err.response?.data?.error === 'INVALID_CREDENTIALS') {
        setError('LN Markets credentials are corrupted. Please reconfigure your API credentials in settings.');
      } else {
        setError(err.message || 'Failed to fetch dashboard data');
      }
      
      setData(null);
    } finally {
      setIsLoading(false);
    }
  }, [isAuthenticated, user?.id, isAdmin]);

  // WebSocket para atualiza√ß√µes em tempo real (integrado com LNMarketsRobustService)
  const wsUrl = `ws://localhost:13000/ws?userId=${user?.id || 'anonymous'}`;
  const { isConnected, sendMessage } = useWebSocket({
    url: wsUrl,
    onMessage: useCallback((message) => {
      console.log('üìä OPTIMIZED DASHBOARD - Mensagem WebSocket recebida:', message);
      
      // ‚úÖ HANDLE DATA UPDATE (dados reais da LN Markets)
      if (message.type === 'data_update') {
        console.log('üîÑ OPTIMIZED DASHBOARD - Dados atualizados via WebSocket:', message.data);
        
        // Atualizar dados diretamente sem fazer nova requisi√ß√£o
        setData(prev => ({
          ...prev,
          lnMarkets: message.data,
          lastUpdate: Date.now(),
          cacheHit: false // Dados frescos do WebSocket
        }));
        
        console.log('‚úÖ OPTIMIZED DASHBOARD - Dados atualizados com sucesso:', {
          positionsCount: message.data.positions?.length || 0,
          hasUser: !!message.data.user,
          timestamp: new Date().toISOString()
        });
      }
      // ‚úÖ HANDLE CONNECTION ESTABLISHED
      else if (message.type === 'connection') {
        console.log('‚úÖ OPTIMIZED DASHBOARD - Conex√£o WebSocket estabelecida');
        
        // Solicitar dados iniciais ap√≥s conex√£o
        setTimeout(() => {
          console.log('üîÑ OPTIMIZED DASHBOARD - Solicitando dados iniciais via WebSocket...');
          sendMessage({
            type: 'refresh_data',
            userId: user?.id
          });
        }, 1000);
      }
      // ‚úÖ HANDLE ERROR
      else if (message.type === 'error') {
        console.error('‚ùå OPTIMIZED DASHBOARD - Erro WebSocket:', message.message);
        // Fallback para fetchDashboardData em caso de erro
        fetchDashboardData();
      }
    }, [fetchDashboardData, user?.id])
  });

  // ‚úÖ SISTEMA H√çBRIDO OTIMIZADO: WebSocket Prim√°rio + Fallback HTTP Condicional
  useEffect(() => {
    if (!isAuthenticated || !user?.id) return;

    console.log('üîÑ OPTIMIZED DASHBOARD - Configurando sistema h√≠brido otimizado...');
    
    let intervalId: NodeJS.Timeout | null = null;
    let healthCheckId: NodeJS.Timeout | null = null;
    
    // ‚úÖ FALLBACK HTTP CONDICIONAL: S√≥ ativa se WebSocket estiver explicitamente desconectado
    if (!isConnected) {
      console.log('üîÑ OPTIMIZED DASHBOARD - WebSocket desconectado, ativando fallback HTTP...');
      intervalId = setInterval(() => {
        console.log('üîÑ OPTIMIZED DASHBOARD - Executando fallback HTTP...');
        fetchDashboardData();
      }, 30000); // 30 segundos - m√°ximo seguro para mercados vol√°teis
    } else {
      console.log('‚úÖ OPTIMIZED DASHBOARD - WebSocket conectado, fallback HTTP DESATIVADO');
    }

    // ‚úÖ HEALTH CHECK: Verificar conex√£o WebSocket periodicamente
    healthCheckId = setInterval(() => {
      if (isConnected) {
        console.log('üíö OPTIMIZED DASHBOARD - WebSocket health check: OK');
      } else {
        console.log('üíî OPTIMIZED DASHBOARD - WebSocket health check: DISCONNECTED');
      }
    }, 10000); // Verificar a cada 10 segundos

    return () => {
      console.log('üîÑ OPTIMIZED DASHBOARD - Limpando sistema h√≠brido otimizado...');
      if (intervalId) clearInterval(intervalId);
      if (healthCheckId) clearInterval(healthCheckId);
    };
  }, [isAuthenticated, user?.id, isConnected]); // Removido fetchDashboardData para evitar loop

  // Carregar dados inicialmente
  useEffect(() => {
    console.log('üîç OPTIMIZED DASHBOARD - useEffect triggered:', {
      isAuthenticated,
      userId: user?.id,
      isAdmin,
      token: localStorage.getItem('access_token') ? 'EXISTS' : 'MISSING'
    });
    
    if (isAuthenticated && user?.id) {
      console.log('üöÄ OPTIMIZED DASHBOARD - Calling fetchDashboardData...');
      fetchDashboardData();
    } else {
      console.log('‚ùå OPTIMIZED DASHBOARD - Not authenticated or no user ID');
    }
  }, [isAuthenticated, user?.id, isAdmin]); // Mant√©m depend√™ncias necess√°rias

  // ‚úÖ REFATORA√á√ÉO: Sistema H√≠brido Otimizado (Conforme documenta√ß√£o)
  const refresh = useCallback(async () => {
    console.log('üîÑ OPTIMIZED DASHBOARD - Manual refresh triggered...');
    
    // ‚úÖ PRIORIDADE ABSOLUTA: WebSocket quando conectado
    if (isConnected && sendMessage) {
      console.log('üöÄ OPTIMIZED DASHBOARD - Solicitando dados via WebSocket (prioridade)...');
      sendMessage({
        type: 'refresh_data',
        userId: user?.id
      });
      // ‚úÖ N√ÉO executar fetchDashboardData quando WebSocket est√° ativo
      return;
    }
    
    // ‚úÖ FALLBACK: HTTP apenas quando WebSocket n√£o est√° dispon√≠vel
    console.log('üîÑ OPTIMIZED DASHBOARD - WebSocket n√£o dispon√≠vel, usando HTTP fallback...');
    await fetchDashboardData();
  }, [isConnected, sendMessage, user?.id]); // ‚úÖ REFATORA√á√ÉO: Removido fetchDashboardData para evitar loop

  // ‚úÖ FUN√á√ÉO DE RECONEX√ÉO AUTOM√ÅTICA
  const reconnectWebSocket = useCallback(() => {
    console.log('üîÑ OPTIMIZED DASHBOARD - Tentando reconectar WebSocket...');
    
    // For√ßar reconex√£o do WebSocket
    if (sendMessage) {
      // Enviar ping para testar conex√£o
      sendMessage({
        type: 'ping',
        userId: user?.id,
        timestamp: Date.now()
      });
    }
  }, [sendMessage, user?.id]);

  return {
    data,
    isLoading,
    error,
    refresh,
    reconnectWebSocket,
    lastUpdate,
    cacheHit,
    isWebSocketConnected: isConnected
  };
};

/**
 * Hook para m√©tricas da dashboard otimizadas
 * Usa dados do endpoint unificado
 */
export const useOptimizedDashboardMetrics = () => {
  const { data, isLoading, error } = useOptimizedDashboardData();

  if (!data || isLoading || error) {
    // ‚úÖ SEGURO: Retornar valores zero quando n√£o h√° dados reais
    // Nunca usar dados simulados em mercados vol√°teis!
    return {
      totalPL: 0, // Zero - dados indispon√≠veis
      estimatedProfit: 0, // Zero - dados indispon√≠veis
      totalMargin: 0, // Zero - dados indispon√≠veis
      estimatedFees: 0, // Zero - dados indispon√≠veis
      availableMargin: 0, // Zero - dados indispon√≠veis
      estimatedBalance: 0, // Zero - dados indispon√≠veis
      totalInvested: 0, // Zero - dados indispon√≠veis
      netProfit: 0, // Zero - dados indispon√≠veis
      feesPaid: 0, // Zero - dados indispon√≠veis
      positionCount: 0, // Zero - dados indispon√≠veis
      activeTrades: 0, // Zero - dados indispon√≠veis
      isLoading,
      error: error || 'Dados indispon√≠veis - por seguran√ßa, n√£o exibimos dados antigos'
    };
  }

  // ‚úÖ VALIDA√á√ÉO DE SEGURAN√áA: Verificar se dados s√£o recentes
  const lastUpdate = data.lnMarkets?.metadata?.lastUpdate;
  if (lastUpdate) {
    const dataAge = Date.now() - new Date(lastUpdate).getTime();
    const maxAge = 5 * 60 * 1000; // 5 minutos m√°ximo (mais razo√°vel para dados de mercado)
    
    if (dataAge > maxAge) {
      console.warn('üö® SEGURAN√áA - Dados muito antigos:', {
        age: Math.floor(dataAge / 1000) + 's',
        maxAge: Math.floor(maxAge / 1000) + 's',
        lastUpdate,
        message: 'Rejeitando dados antigos por seguran√ßa'
      });
      
      return {
        totalPL: 0,
        estimatedProfit: 0,
        totalMargin: 0,
        estimatedFees: 0,
        availableMargin: 0,
        estimatedBalance: 0,
        totalInvested: 0,
        netProfit: 0,
        feesPaid: 0,
        positionCount: 0,
        activeTrades: 0,
        isLoading: false,
        error: 'Dados muito antigos - por seguran√ßa, n√£o exibimos dados desatualizados'
      };
    }
  }

  // Calcular m√©tricas dos dados unificados (API v2)
  const positions = data.lnMarkets?.positions || [];
  const user = data.lnMarkets?.user || {};
  
  // ‚úÖ Dados recebidos com sucesso
  const calculatedTotalPL = positions.reduce((sum, pos) => sum + (pos.pl || 0), 0);
  
  console.log('‚úÖ OPTIMIZED DASHBOARD METRICS - Data processed:', {
    hasData: !!data,
    hasLnMarkets: !!data.lnMarkets,
    positionsCount: positions.length,
    userBalance: user.balance,
    totalPL: calculatedTotalPL,
    timestamp: new Date().toISOString()
  });
  
  // Calcular P&L total das posi√ß√µes running
  const totalPL = positions.reduce((sum, pos) => sum + (pos.pl || 0), 0);
  
  // Estimated Profit: Lucro estimado se fechar TODAS as posi√ß√µes AGORA
  // Isso inclui o PnL atual + taxas de fechamento estimadas
  const estimatedProfit = positions.reduce((sum, pos) => {
    const currentPnL = pos.pl || 0;
    const closingFee = pos.closing_fee || 0;
    // PnL atual menos a taxa de fechamento (que seria cobrada ao fechar)
    return sum + (currentPnL - closingFee);
  }, 0);
  const totalMargin = positions.reduce((sum, pos) => sum + (pos.margin || 0), 0);
  const estimatedFees = positions.reduce((sum, pos) => sum + (pos.opening_fee || 0) + (pos.closing_fee || 0), 0);
  const availableMargin = user.balance || 0; // Saldo da wallet
  const estimatedBalance = (user.balance || 0) + totalPL; // Saldo + P&L
  const totalInvested = totalMargin; // Margem total investida
  const netProfit = totalPL; // P&L l√≠quido
  const feesPaid = estimatedFees; // Taxas pagas
  const positionCount = positions.length;
  const activeTrades = positions.filter(p => p.running && !p.closed).length;

  return {
    totalPL,
    estimatedProfit,
    totalMargin,
    estimatedFees,
    availableMargin,
    estimatedBalance,
    totalInvested,
    netProfit,
    feesPaid,
    positionCount,
    activeTrades,
    isLoading,
    error
  };
};

/**
 * Hook para dados de posi√ß√µes otimizados
 * Usa dados do endpoint unificado
 */
export const useOptimizedPositions = () => {
  const { data, isLoading, error } = useOptimizedDashboardData();

  const positions = data?.lnMarkets?.positions || [];

  return {
    positions,
    isLoading,
    error
  };
};

/**
 * Hook para dados de mercado otimizados
 * Usa dados do endpoint unificado
 */
export const useOptimizedMarketData = () => {
  const { data, isLoading, error } = useOptimizedDashboardData();

  return {
    marketIndex: data?.lnMarkets?.market || null,
    deposits: data?.lnMarkets?.deposits || [],
    withdrawals: data?.lnMarkets?.withdrawals || [],
    isLoading,
    error
  };
};
