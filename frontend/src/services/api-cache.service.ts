/**
 * API Cache Service
 * 
 * Servi√ßo centralizado para evitar m√∫ltiplas chamadas simult√¢neas para as mesmas rotas
 * Implementa cache inteligente e deduplica√ß√£o de requisi√ß√µes
 * 
 * ‚ö†Ô∏è SEGURAN√áA EM MERCADOS VOL√ÅTEIS:
 * - Cache m√°ximo de 15 segundos para dados de mercado
 * - Valida√ß√£o rigorosa de timestamps
 * - Nenhum fallback com dados antigos
 * - Erro transparente quando dados indispon√≠veis
 */

interface CacheEntry {
  data: any;
  timestamp: number;
  promise?: Promise<any>;
}

class APICacheService {
  private cache = new Map<string, CacheEntry>();
  private readonly DEFAULT_TTL = 30 * 1000; // 30 segundos para dados n√£o-cr√≠ticos
  
  // TTLs espec√≠ficos por rota - SEGURAN√áA EM MERCADOS VOL√ÅTEIS
  private readonly ROUTE_TTL: Record<string, number> = {
    '/api/version': 5 * 60 * 1000, // 5 minutos - dados n√£o-cr√≠ticos
    '/api/market/index/public': 15 * 1000, // 15 segundos - M√ÅXIMO para dados de mercado
    '/api/admin/health/health': 30 * 1000, // 30 segundos - dados de sistema
    '/api/admin/hardware/metrics': 30 * 1000, // 30 segundos - dados de sistema
    '/api/admin/market-data/market-data': 15 * 1000, // 15 segundos - dados de mercado cr√≠ticos
    '/api/admin/market-data/providers/status': 30 * 1000, // 30 segundos - status de sistema
    '/api/admin/lnmarkets/market-data': 15 * 1000, // 15 segundos - dados de mercado cr√≠ticos
  };

  /**
   * Valida se os dados s√£o recentes e seguros para uso
   */
  private validateMarketData(data: any, url: string): boolean {
    // Verificar se √© uma rota de dados de mercado
    const isMarketDataRoute = url.includes('market') || url.includes('lnmarkets');
    
    if (!isMarketDataRoute) {
      return true; // Dados n√£o-cr√≠ticos n√£o precisam de valida√ß√£o rigorosa
    }

    // Para dados de mercado, validar timestamp rigorosamente
    if (!data || !data.timestamp) {
      console.warn(`‚ö†Ô∏è API CACHE - Market data without timestamp for ${url}`);
      return false;
    }

    const dataAge = Date.now() - new Date(data.timestamp).getTime();
    const maxAge = 15 * 1000; // 15 segundos m√°ximo para dados de mercado

    if (dataAge > maxAge) {
      console.warn(`‚ö†Ô∏è API CACHE - Market data too old (${dataAge}ms) for ${url}`);
      return false;
    }

    return true;
  }

  /**
   * Executa uma requisi√ß√£o com cache e deduplica√ß√£o
   */
  async request(url: string, requestFn: () => Promise<any>, ttl?: number): Promise<any> {
    const now = Date.now();
    const cacheKey = url;
    const cacheTTL = ttl || this.ROUTE_TTL[url] || this.DEFAULT_TTL;
    
    // Verificar se j√° existe uma requisi√ß√£o em andamento para esta URL
    const existingEntry = this.cache.get(cacheKey);
    if (existingEntry?.promise) {
      console.log(`üîÑ API CACHE - Deduplicating request for ${url}`);
      return existingEntry.promise;
    }
    
    // Verificar se h√° dados v√°lidos no cache
    if (existingEntry?.data) {
      const dataAge = now - existingEntry.timestamp;
      
      // Valida√ß√£o adicional para dados de mercado
      if (dataAge < cacheTTL && this.validateMarketData(existingEntry.data, url)) {
        console.log(`‚úÖ API CACHE - Using cached data for ${url} (age: ${dataAge}ms)`);
        return existingEntry.data;
      } else {
        // Dados expirados ou inv√°lidos - remover do cache
        console.log(`üóëÔ∏è API CACHE - Removing expired/invalid data for ${url}`);
        this.cache.delete(cacheKey);
      }
    }
    
    // Executar a requisi√ß√£o
    console.log(`üåê API CACHE - Making fresh request for ${url}`);
    const requestPromise = requestFn().catch(error => {
      // Remove a promise do cache em caso de erro
      this.cache.delete(cacheKey);
      throw error;
    });
    
    // Armazenar a promise no cache para deduplica√ß√£o
    this.cache.set(cacheKey, {
      data: null,
      timestamp: now,
      promise: requestPromise
    });
    
    try {
      const result = await requestPromise;
      
      // Valida√ß√£o rigorosa dos dados recebidos
      if (!this.validateMarketData(result, url)) {
        console.error(`‚ùå API CACHE - Invalid market data received for ${url}`);
        this.cache.delete(cacheKey);
        throw new Error('Invalid market data - data too old or missing timestamp');
      }
      
      // Armazenar o resultado no cache apenas se v√°lido
      this.cache.set(cacheKey, {
        data: result,
        timestamp: now,
        promise: undefined
      });
      
      console.log(`‚úÖ API CACHE - Cached valid result for ${url}`);
      return result;
    } catch (error) {
      // Remove entrada do cache em caso de erro
      this.cache.delete(cacheKey);
      throw error;
    }
  }

  /**
   * Limpa o cache para uma URL espec√≠fica
   */
  invalidate(url: string): void {
    this.cache.delete(url);
    console.log(`üóëÔ∏è API CACHE - Invalidated cache for ${url}`);
  }

  /**
   * Limpa todo o cache
   */
  clear(): void {
    this.cache.clear();
    console.log('üóëÔ∏è API CACHE - Cleared all cache');
  }

  /**
   * Remove entradas expiradas do cache
   */
  cleanup(): void {
    const now = Date.now();
    let removedCount = 0;
    
    for (const [key, entry] of this.cache.entries()) {
      const ttl = this.ROUTE_TTL[key] || this.DEFAULT_TTL;
      if ((now - entry.timestamp) > ttl) {
        this.cache.delete(key);
        removedCount++;
      }
    }
    
    if (removedCount > 0) {
      console.log(`üßπ API CACHE - Cleaned up ${removedCount} expired entries`);
    }
  }

  /**
   * Obt√©m estat√≠sticas do cache
   */
  getStats() {
    return {
      size: this.cache.size,
      entries: Array.from(this.cache.keys())
    };
  }
}

// Inst√¢ncia singleton
export const apiCacheService = new APICacheService();

// Cleanup autom√°tico a cada 5 minutos
setInterval(() => {
  apiCacheService.cleanup();
}, 5 * 60 * 1000);
