// Schema Prisma atualizado para suportar múltiplas exchanges
// Este é um exemplo de como ficaria o schema após a migração

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Tabela de exchanges suportadas
model Exchange {
  id          String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  name        String   @unique // "LN Markets", "Binance", "Coinbase", etc.
  slug        String   @unique // "ln-markets", "binance", "coinbase"
  description String?
  website     String?
  logo_url    String?
  is_active   Boolean  @default(true)
  api_version String?  // "v1", "v2", etc.
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  
  // Relacionamentos
  credential_types ExchangeCredentialType[]
  user_credentials UserExchangeCredentials[]
  
  @@index([slug])
  @@index([is_active])
  @@map("exchanges")
}

// Tipos de credenciais para cada exchange
model ExchangeCredentialType {
  id          String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  exchange_id String
  name        String   // "API Key", "API Secret", "Passphrase", "Webhook Secret"
  field_name  String   // "api_key", "api_secret", "passphrase", "webhook_secret"
  field_type  String   // "text", "password", "url", "number"
  is_required Boolean  @default(true)
  description String?
  order       Int      @default(0)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  
  // Relacionamentos
  exchange Exchange @relation(fields: [exchange_id], references: [id], onDelete: Cascade)
  
  @@unique([exchange_id, field_name])
  @@index([exchange_id])
  @@index([is_required])
  @@map("exchange_credential_types")
}

// Credenciais do usuário para cada exchange
model UserExchangeCredentials {
  id          String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  user_id     String
  exchange_id String
  credentials Json     // Armazena todas as credenciais criptografadas
  is_active   Boolean  @default(true)
  is_verified Boolean  @default(false)
  last_test   DateTime? @db.Timestamp(6)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  
  // Relacionamentos
  user     User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  exchange Exchange @relation(fields: [exchange_id], references: [id], onDelete: Cascade)
  
  @@unique([user_id, exchange_id])
  @@index([user_id])
  @@index([exchange_id])
  @@index([is_active])
  @@index([is_verified])
  @@map("user_exchange_credentials")
}

// Modelo User atualizado (sem campos específicos da LN Markets)
model User {
  id                         String               @id @default(dbgenerated("(gen_random_uuid())::text"))
  email                      String               @unique
  username                   String               @unique
  first_name                 String?              // Campo separado para nome
  last_name                  String?              // Campo separado para sobrenome
  password_hash              String?
  social_provider            String?
  social_id                  String?
  // REMOVIDOS: ln_markets_api_key, ln_markets_api_secret, ln_markets_passphrase
  last_activity_at           DateTime?            @db.Timestamp(6)
  created_at                 DateTime             @default(now()) @db.Timestamp(6)
  updated_at                 DateTime             @default(now()) @db.Timestamp(6)
  is_active                  Boolean              @default(true)
  session_expires_at         DateTime?            @db.Timestamp(6)
  email_verified             Boolean?             @default(false)
  email_verification_token   String?
  email_verification_expires DateTime?            @db.Timestamp(6)
  password_reset_token       String?
  password_reset_expires     DateTime?            @db.Timestamp(6)
  two_factor_enabled         Boolean?             @default(false)
  two_factor_secret          String?
  two_factor_backup_codes    Json?
  login_attempts             Int?                 @default(0)
  locked_until               DateTime?            @db.Timestamp(6)
  last_login_ip              String?
  last_login_user_agent      String?
  last_login_at              DateTime?            @db.Timestamp(6)
  plan_type                  PlanType             @default(free)
  preferences                Json?
  bio                        String?
  birthday                   DateTime?            @db.Date
  website                    String?              @db.VarChar(255)
  risk_limits                Json?
  risk_profile               String?              @default("moderate") @db.VarChar(50)
  // Campos para email marketing
  email_marketing_consent    Boolean?             @default(false) // Consentimento para email marketing
  email_marketing_consent_at DateTime?            @db.Timestamp(6) // Data do consentimento
  marketing_preferences       Json?                // Preferências de marketing (JSON)
  
  // Relacionamentos existentes
  admin_user                 AdminUser?
  automations                Automation[]
  backtest_reports           BacktestReport[]
  notifications              Notification[]
  payments                   Payment[]
  refresh_tokens             RefreshToken[]
  security_audit_logs        SecurityAuditLog[]
  security_configs_updated   SecurityConfig[]     @relation("SecurityConfigUpdatedBy")
  trade_logs                 TradeLog[]
  user_coupons               UserCoupon[]         @relation("UserCouponRelation")
  audit_logs                 AuditLog[]
  notification_logs          NotificationLog[]
  order_confirmations        OrderConfirmation[]
  simulations                Simulation[]
  trading_logs               TradingLog[]
  upgrades_made              UserUpgradeHistory[] @relation("AdminUpgradeHistory")
  upgrade_history            UserUpgradeHistory[] @relation("UserUpgradeHistory")
  registration_progress      RegistrationProgress?
  
  // NOVO: Relacionamento com credenciais de exchanges
  exchange_credentials       UserExchangeCredentials[]

  @@index([email], map: "idx_user_email")
  @@index([email_verification_token], map: "idx_user_email_verification_token")
  @@index([password_reset_token], map: "idx_user_password_reset_token")
}

// Exemplo de como ficaria o RegistrationProgress atualizado
model RegistrationProgress {
  id              String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  user_id         String   @unique
  current_step    String   @default("personal_data") // personal_data, plan_selection, payment, credentials, completed
  completed_steps Json     @default("[]") // Array of completed steps
  personal_data   Json?    // Store personal data from step 1
  selected_plan   String? // Store selected plan from step 2
  payment_data    Json?    // Store payment information from step 3
  credentials_data Json?   // Store exchange credentials from step 4 (genérico)
  coupon_code     String?  // Store coupon code if used
  session_token   String?  // Temporary token for unauthenticated users
  expires_at      DateTime? @db.Timestamp(6) // For session-based progress
  created_at      DateTime @default(now()) @db.Timestamp(6)
  updated_at      DateTime @default(now()) @db.Timestamp(6)
  user            User?    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([current_step])
  @@index([session_token])
  @@index([expires_at])
  @@map("registration_progress")
}

// Enum PlanType permanece igual
enum PlanType {
  free
  basic
  advanced
  pro
  lifetime
}

// Exemplo de dados iniciais para LN Markets
// INSERT INTO exchanges (id, name, slug, description, website, is_active, api_version) 
// VALUES ('ln-markets-uuid', 'LN Markets', 'ln-markets', 'Lightning Network Bitcoin trading platform', 'https://lnmarkets.com', true, 'v2');

// INSERT INTO exchange_credential_types (exchange_id, name, field_name, field_type, is_required, description, "order")
// VALUES 
//   ('ln-markets-uuid', 'API Key', 'api_key', 'text', true, 'Your LN Markets API key', 1),
//   ('ln-markets-uuid', 'API Secret', 'api_secret', 'password', true, 'Your LN Markets API secret', 2),
//   ('ln-markets-uuid', 'Passphrase', 'passphrase', 'password', true, 'Your LN Markets passphrase', 3);
