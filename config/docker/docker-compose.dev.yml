services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: axisor-postgres
    environment:
      POSTGRES_DB: axisor
      POSTGRES_USER: axisor
      POSTGRES_PASSWORD: axisor_dev_password
    ports:
      - "15432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - axisor-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U axisor -d axisor"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Queue
  redis:
    image: redis:7
    container_name: axisor-redis
    ports:
      - "16379:6379"
    volumes:
      - redis_data:/data
    networks:
      - axisor-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ../../backend
      dockerfile: Dockerfile.dev
    container_name: axisor-backend
    env_file:
      - ../env/.env.development
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://axisor:axisor_dev_password@postgres:5432/axisor?schema=public
      REDIS_URL: redis://redis:6379
      PORT: 3010
      # LN Markets API - CORRIGIDO
      LN_MARKETS_API_BASE_URL: "https://api.lnmarkets.com/v2"
      LN_MARKETS_API_BASE_URL_TESTNET: "https://api.testnet4.lnmarkets.com/v2"
      LN_MARKETS_API_BASE_URL_CURRENT: "https://api.lnmarkets.com/v2"
      # LND Configuration
      LND_TESTNET_ENABLED: "true"
      LND_TESTNET_BASE_URL: "https://localhost:18080"
      LND_TESTNET_TLS_CERT_PATH: "/lnd/tls.cert"
      LND_TESTNET_MACAROON_PATH: "/lnd/data/chain/bitcoin/testnet/admin.macaroon"
      LND_MAINNET_ENABLED: "false"
      LND_MAINNET_BASE_URL: "https://localhost:18081"
    ports:
      - "13010:3010"
    volumes:
      - ../../backend:/app
      - ../../.system:/app/.system
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - axisor-network
    command: npm run dev
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://127.0.0.1:3010/api/health-check', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile.dev
    container_name: axisor-frontend
    ports:
      - "13000:3001"
    volumes:
      - ../../frontend:/app
      - /app/node_modules
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - axisor-network
    command: npm run dev
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://127.0.0.1:3001', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Workers (opcionais para desenvolvimento)
  margin-monitor:
    build:
      context: ../../backend
      dockerfile: Dockerfile.dev
    container_name: axisor-margin-monitor
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://axisor:axisor_dev_password@postgres:5432/axisor?schema=public
      REDIS_URL: redis://redis:6379
    volumes:
      - ../../backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - axisor-network
    command: npm run worker:margin-monitor
    profiles:
      - workers

  automation-executor:
    build:
      context: ../../backend
      dockerfile: Dockerfile.dev
    container_name: axisor-automation-executor
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://axisor:axisor_dev_password@postgres:5432/axisor?schema=public
      REDIS_URL: redis://redis:6379
    volumes:
      - ../../backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - axisor-network
    command: npm run worker:automation-executor
    profiles:
      - workers

  notification-worker:
    build:
      context: ../../backend
      dockerfile: Dockerfile.dev
    container_name: axisor-notification-worker
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://axisor:axisor_dev_password@postgres:5432/axisor?schema=public
      REDIS_URL: redis://redis:6379
    volumes:
      - ../../backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - axisor-network
    command: npm run worker:notification
    profiles:
      - workers

  payment-validator:
    build:
      context: ../../backend
      dockerfile: Dockerfile.dev
    container_name: axisor-payment-validator
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://axisor:axisor_dev_password@postgres:5432/axisor?schema=public
      REDIS_URL: redis://redis:6379
    volumes:
      - ../../backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - axisor-network
    command: npm run worker:payment-validator
    profiles:
      - workers

  # LND Testnet Node
  lnd-testnet:
    image: lightninglabs/lnd:v0.17.0-beta
    container_name: axisor-lnd-testnet
    environment:
      - LND_TLSAUTOREFRESH=1
      - LND_TLSEXTRADOMAIN=lnd-testnet
    ports:
      - "19735:9735"  # P2P
      - "20009:10009" # gRPC
      - "18080:8080"  # REST
    volumes:
      - lnd_testnet_data:/lnd
    networks:
      - axisor-network
    command: >
      lnd 
      --bitcoin.active
      --bitcoin.testnet
      --bitcoin.node=neutrino
      --neutrino.addpeer=faucet.lightning.community
      --neutrino.addpeer=btcd-testnet.lightning.computer
      --alias=Axisor-Testnet-Node
      --color=#FF6B35
      --listen=0.0.0.0:9735
      --rpclisten=0.0.0.0:10009
      --restlisten=0.0.0.0:8080
      --accept-keysend
      --accept-amp
      --debuglevel=info
    healthcheck:
      test: ["CMD", "lndcli", "--network=testnet", "getinfo"]
      interval: 30s
      timeout: 10s
      retries: 5
    profiles:
      - lnd

  # LND Mainnet Node (comentado por padrão - ativar apenas em produção)
  # lnd-mainnet:
  #   image: lightninglabs/lnd:v0.17.0-beta
  #   container_name: axisor-lnd-mainnet
  #   environment:
  #     - BITCOIN_NETWORK=mainnet
  #     - LND_ALIAS=Axisor-Production-Node
  #     - LND_COLOR=#4ECDC4
  #     - LND_EXTERNALIP=
  #     - LND_LISTEN=0.0.0.0:9736
  #     - LND_RPCLISTEN=0.0.0.0:10010
  #     - LND_RESTLISTEN=0.0.0.0:8081
  #     - LND_BITCOIN_NODE=neutrino
  #     - LND_NEUTRINO_CONNECT=mainnet1-btcd.zaphq.io
  #     - LND_NEUTRINO_CONNECT=mainnet2-btcd.zaphq.io
  #     - LND_ACCEPT_KEYSEND=true
  #     - LND_ACCEPT_AMP=true
  #     - LND_DEBUGLEVEL=warn
  #     - LND_TLSAUTOREFRESH=1
  #     - LND_TLSEXTRADOMAIN=lnd-mainnet
  #   ports:
  #     - "19736:9736"  # P2P
  #     - "20010:10010" # gRPC
  #     - "18081:8081"  # REST
  #   volumes:
  #     - lnd_mainnet_data:/lnd
  #     - ../../config/lnd/lnd-mainnet.conf:/lnd/lnd.conf
  #   networks:
  #     - axisor-network
  #   command: >
  #     lnd 
  #     --configfile=/lnd/lnd.conf
  #     --tlscertpath=/lnd/tls.cert
  #     --tlskeypath=/lnd/tls.key
  #   healthcheck:
  #     test: ["CMD", "lndcli", "--network=mainnet", "getinfo"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #   profiles:
  #     - lnd

volumes:
  postgres_data:
  redis_data:
  lnd_testnet_data:
  lnd_mainnet_data:

networks:
  axisor-network:
    driver: bridge
