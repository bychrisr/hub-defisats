version: '3.8'

services:
  # PostgreSQL Database (Staging)
  postgres:
    image: postgres:15-alpine
    container_name: hub-defisats-postgres-staging
    environment:
      POSTGRES_DB: hubdefisats_staging
      POSTGRES_USER: hubdefisats_staging
      POSTGRES_PASSWORD: hubdefisats_staging_password_2024
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
    networks:
      - hub-defisats-staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hubdefisats_staging -d hubdefisats_staging"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache & Queue (Staging)
  redis:
    image: redis:7-alpine
    container_name: hub-defisats-redis-staging
    command: redis-server --appendonly yes --requirepass hubdefisats_staging_redis_2024
    volumes:
      - redis_staging_data:/data
    networks:
      - hub-defisats-staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "hubdefisats_staging_redis_2024", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API (Staging)
  backend:
    build:
      context: ../../backend
      dockerfile: Dockerfile
    container_name: hub-defisats-backend-staging
    env_file:
      - ../../.env.staging
    environment:
      NODE_ENV: staging
      PORT: 3010
      DATABASE_URL: postgresql://hubdefisats_staging:hubdefisats_staging_password_2024@postgres:5432/hubdefisats_staging?schema=public
      REDIS_URL: redis://:hubdefisats_staging_redis_2024@redis:6379
      JWT_SECRET: staging-jwt-secret-key-32-chars-minimum-2024
      REFRESH_TOKEN_SECRET: staging-refresh-secret-key-32-chars-minimum-2024
      ENCRYPTION_KEY: staging-encryption-key-32-chars-2024
      CORS_ORIGIN: https://staging.defisats.site
      VITE_API_URL: https://staging.defisats.site/api
    ports:
      - "13020:3010"  # Porta staging
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hub-defisats-staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3010/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Staging)
  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile
    container_name: hub-defisats-frontend-staging
    environment:
      VITE_API_URL: https://staging.defisats.site/api
      NODE_ENV: staging
    ports:
      - "13010:3001"  # Porta staging
    depends_on:
      - backend
    networks:
      - hub-defisats-staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Workers (Staging) - Opcionais
  margin-monitor:
    build:
      context: ../../backend
      dockerfile: Dockerfile
    container_name: hub-defisats-margin-monitor-staging
    command: ["npm", "run", "worker:margin-monitor"]
    env_file:
      - ../../.env.staging
    environment:
      NODE_ENV: staging
      DATABASE_URL: postgresql://hubdefisats_staging:hubdefisats_staging_password_2024@postgres:5432/hubdefisats_staging
      REDIS_URL: redis://:hubdefisats_staging_redis_2024@redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hub-defisats-staging-network
    restart: unless-stopped

  automation-executor:
    build:
      context: ../../backend
      dockerfile: Dockerfile
    container_name: hub-defisats-automation-executor-staging
    command: ["npm", "run", "worker:automation-executor"]
    env_file:
      - ../../.env.staging
    environment:
      NODE_ENV: staging
      DATABASE_URL: postgresql://hubdefisats_staging:hubdefisats_staging_password_2024@postgres:5432/hubdefisats_staging
      REDIS_URL: redis://:hubdefisats_staging_redis_2024@redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hub-defisats-staging-network
    restart: unless-stopped

  notification-worker:
    build:
      context: ../../backend
      dockerfile: Dockerfile
    container_name: hub-defisats-notification-worker-staging
    command: ["npm", "run", "worker:notification"]
    env_file:
      - ../../.env.staging
    environment:
      NODE_ENV: staging
      DATABASE_URL: postgresql://hubdefisats_staging:hubdefisats_staging_password_2024@postgres:5432/hubdefisats_staging
      REDIS_URL: redis://:hubdefisats_staging_redis_2024@redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hub-defisats-staging-network
    restart: unless-stopped

  payment-validator:
    build:
      context: ../../backend
      dockerfile: Dockerfile
    container_name: hub-defisats-payment-validator-staging
    command: ["npm", "run", "worker:payment-validator"]
    env_file:
      - ../../.env.staging
    environment:
      NODE_ENV: staging
      DATABASE_URL: postgresql://hubdefisats_staging:hubdefisats_staging_password_2024@postgres:5432/hubdefisats_staging
      REDIS_URL: redis://:hubdefisats_staging_redis_2024@redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hub-defisats-staging-network
    restart: unless-stopped

  simulation-executor:
    build:
      context: ../../backend
      dockerfile: Dockerfile
    container_name: hub-defisats-simulation-executor-staging
    command: ["npm", "run", "worker:simulation-executor"]
    env_file:
      - ../../.env.staging
    environment:
      NODE_ENV: staging
      DATABASE_URL: postgresql://hubdefisats_staging:hubdefisats_staging_password_2024@postgres:5432/hubdefisats_staging
      REDIS_URL: redis://:hubdefisats_staging_redis_2024@redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hub-defisats-staging-network
    restart: unless-stopped

  # Nginx Internal (Staging)
  nginx:
    image: nginx:alpine
    container_name: hub-defisats-nginx-staging
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx/nginx-staging.conf:/etc/nginx/nginx.conf:ro
      - nginx_staging_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - hub-defisats-staging-network
    restart: unless-stopped

volumes:
  postgres_staging_data:
    driver: local
  redis_staging_data:
    driver: local
  nginx_staging_logs:
    driver: local

networks:
  hub-defisats-staging-network:
    driver: bridge