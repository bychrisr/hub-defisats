version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: axisor-postgres
    environment:
      POSTGRES_DB: axisor
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/prisma/migrations:/docker-entrypoint-initdb.d/migrations
    networks:
      - axisor-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d axisor"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: axisor-redis
    command: redis-server --appendonly yes --requirepass axisor_redis_password_2024
    volumes:
      - redis_data:/data
    networks:
      - axisor-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ../../backend
      dockerfile: Dockerfile
    container_name: axisor-backend
    env_file:
      - ../../.env
    environment:
      NODE_ENV: production
      PORT: 3010
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/axisor
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      LN_MARKETS_API_KEY: ${LN_MARKETS_API_KEY}
      LN_MARKETS_API_SECRET: ${LN_MARKETS_API_SECRET}
      LN_MARKETS_PASSPHRASE: ${LN_MARKETS_PASSPHRASE}
      EVOLUTION_API_URL: ${EVOLUTION_API_URL}
      EVOLUTION_API_KEY: ${EVOLUTION_API_KEY}
      HCAPTCHA_SECRET_KEY: ${HCAPTCHA_SECRET_KEY}
      RECAPTCHA_SECRET_KEY: ${RECAPTCHA_SECRET_KEY}
      RECAPTCHA_V3_SECRET_KEY: ${RECAPTCHA_V3_SECRET_KEY}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SLACK_WEBHOOK_URL: ${SLACK_WEBHOOK_URL}
      SENTRY_DSN: ${SENTRY_DSN}
    ports:
      - "3010:3010"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - axisor-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3010/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Application
  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile
    container_name: axisor-frontend
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:3010}
      VITE_WS_URL: ${VITE_WS_URL:-ws://localhost:3010}
      VITE_HCAPTCHA_SITE_KEY: ${VITE_HCAPTCHA_SITE_KEY}
      VITE_RECAPTCHA_SITE_KEY: ${VITE_RECAPTCHA_SITE_KEY}
      VITE_RECAPTCHA_V3_SITE_KEY: ${VITE_RECAPTCHA_V3_SITE_KEY}
      VITE_SENTRY_DSN: ${VITE_SENTRY_DSN}
    ports:
      - "8080:80"
    depends_on:
      - backend
    networks:
      - axisor-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: axisor-nginx
    ports:
      - "8443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - axisor-network
    restart: unless-stopped

  # Worker Services
  margin-monitor:
    build:
      context: ../../backend
      dockerfile: Dockerfile
    container_name: axisor-margin-monitor
    command: ["npm", "run", "worker:margin-monitor"]
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/axisor
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      LN_MARKETS_API_KEY: ${LN_MARKETS_API_KEY}
      LN_MARKETS_API_SECRET: ${LN_MARKETS_API_SECRET}
      LN_MARKETS_PASSPHRASE: ${LN_MARKETS_PASSPHRASE}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - axisor-network
    restart: unless-stopped

  automation-executor:
    build:
      context: ../../backend
      dockerfile: Dockerfile
    container_name: axisor-automation-executor
    command: ["npm", "run", "worker:automation-executor"]
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/axisor
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      LN_MARKETS_API_KEY: ${LN_MARKETS_API_KEY}
      LN_MARKETS_API_SECRET: ${LN_MARKETS_API_SECRET}
      LN_MARKETS_PASSPHRASE: ${LN_MARKETS_PASSPHRASE}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - axisor-network
    restart: unless-stopped

  notification-worker:
    build:
      context: ../../backend
      dockerfile: Dockerfile
    container_name: axisor-notification-worker
    command: ["npm", "run", "worker:notification"]
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/axisor
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      EVOLUTION_API_URL: ${EVOLUTION_API_URL}
      EVOLUTION_API_KEY: ${EVOLUTION_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - axisor-network
    restart: unless-stopped

  payment-validator:
    build:
      context: ../../backend
      dockerfile: Dockerfile
    container_name: axisor-payment-validator
    command: ["npm", "run", "worker:payment-validator"]
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/axisor
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      LN_MARKETS_API_KEY: ${LN_MARKETS_API_KEY}
      LN_MARKETS_API_SECRET: ${LN_MARKETS_API_SECRET}
      LN_MARKETS_PASSPHRASE: ${LN_MARKETS_PASSPHRASE}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - axisor-network
    restart: unless-stopped

  simulation-executor:
    build:
      context: ../../backend
      dockerfile: Dockerfile
    container_name: axisor-simulation-executor
    command: ["npm", "run", "worker:simulation-executor"]
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/axisor
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - axisor-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  axisor-network:
    driver: bridge