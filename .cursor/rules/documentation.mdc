# Regras de Documenta√ß√£o para Cursor AI

## üéØ Objetivo

Garantir que toda documenta√ß√£o criada ou atualizada pela Cursor AI siga os padr√µes estabelecidos em `.system/DOCUMENTATION_STANDARDS.md` e mantenha a qualidade exemplar demonstrada em `.system/docs/lnmarkets/`.

## üìö Regras Principais

### 1. SEMPRE Seguir DOCUMENTATION_STANDARDS.md

- **Estrutura de pastas padr√£o**: Use o template definido
- **Template de arquivo obrigat√≥rio**: Todos os arquivos devem ter metadados
- **Metadados completos**: Status, vers√£o, data, respons√°vel

**Verifica√ß√£o:**
```bash
# Antes de commitar, verificar se documenta√ß√£o segue padr√µes
cat .system/DOCUMENTATION_STANDARDS.md
```

### 2. Usar .system/docs/lnmarkets/ como Refer√™ncia Gold Standard

- **Copiar estrutura e estilo**: Mantenha mesmo padr√£o
- **Manter mesmo n√≠vel de qualidade**: N√£o aceitar documenta√ß√£o inferior
- **Seguir exemplos existentes**: Use como template

**Exemplos de Qualidade:**
- `.system/docs/lnmarkets/README.md` - √çndice completo
- `.system/docs/lnmarkets/internal-implementation/01-architecture.md` - Arquitetura detalhada
- `.system/docs/lnmarkets/internal-implementation/02-best-practices.md` - Exemplos pr√°ticos
- `.system/docs/lnmarkets/internal-implementation/05-examples.md` - Code snippets testados

### 3. Separar external-api de internal-implementation

**NUNCA misturar os dois contextos:**

```
‚úÖ CORRETO:
.system/docs/feature/
‚îú‚îÄ‚îÄ external-api/          # API de terceiros (LN Markets, Stripe, etc.)
‚îÇ   ‚îî‚îÄ‚îÄ 01-overview.md
‚îî‚îÄ‚îÄ internal-implementation/  # Nossa implementa√ß√£o
    ‚îî‚îÄ‚îÄ 01-architecture.md

‚ùå ERRADO:
.system/docs/feature/
‚îî‚îÄ‚îÄ implementation.md      # Mistura API externa com nossa implementa√ß√£o
```

### 4. Incluir Exemplos Pr√°ticos Testados

- **Code snippets do projeto real**: Nunca inventar exemplos
- **N√£o code snippets gen√©ricos**: Usar c√≥digo real do Axisor
- **Testar antes de documentar**: Garantir que funciona

**Exemplo:**
```typescript
// ‚úÖ CORRETO: C√≥digo real do projeto
const lnMarketsService = new LNMarketsAPIv2({
  credentials: {
    apiKey: credentials.credentials['API Key'],
    apiSecret: credentials.credentials['API Secret'],
    passphrase: credentials.credentials['Passphrase'],
    isTestnet: false
  },
  logger: console as any
});

const user = await lnMarketsService.user.getUser();
```

### 5. Manter Metadados Atualizados

**Sempre incluir no topo de cada arquivo:**

```markdown
# Feature Name - Document Title

> **Status**: Active  
> **√öltima Atualiza√ß√£o**: 2025-01-09  
> **Vers√£o**: 1.0.0  
> **Respons√°vel**: System Name  
```

**Atualizar quando:**
- Mudar conte√∫do do documento
- Deprecar funcionalidade
- Versionar mudan√ßas importantes

### 6. Cross-References Devem Funcionar

- **Testar todos os links**: Garantir que n√£o est√£o quebrados
- **Usar caminhos relativos**: Nunca absolutos
- **Atualizar se arquivos movidos**: Manter refer√™ncias corretas

**Formato:**
```markdown
# ‚úÖ CORRETO
Ver [Arquitetura](./internal-implementation/01-architecture.md)
Ver [Erro de Signature](./internal-implementation/04-troubleshooting.md#signature-is-not-valid)

# ‚ùå ERRADO
Ver Arquitetura (sem link)
Ver /home/user/.system/docs/architecture.md (caminho absoluto)
```

### 7. Code Snippets Devem Ter Syntax Highlighting

**Sempre especificar a linguagem:**

```typescript
// ‚úÖ CORRETO
const example = 'with highlighting';
```

```
// ‚ùå ERRADO (sem linguagem especificada)
const example = 'no highlighting';
```

**Incluir coment√°rios explicativos:**
```typescript
const apiKey = credentials.credentials['API Key'];  // Access with bracket notation
const balance = user.balance ?? 0;                   // Fallback to 0 if null
```

### 8. Diagramas Quando √öteis

**Prefer√™ncia:**
1. **Mermaid** (c√≥digo como diagrama)
2. **ASCII art** (aceit√°vel para diagramas simples)
3. **Imagens** (√∫ltimo recurso)

**Exemplo Mermaid:**
```mermaid
graph TB
    A[Client] --> B[API]
    B --> C[LNMarketsAPIv2]
    C --> D[External API]
```

### 9. Changelog Sempre Atualizado

**Toda mudan√ßa relevante deve estar no CHANGELOG:**

```markdown
## [Unreleased]

### Added
- Nova feature X com documenta√ß√£o completa
- Documenta√ß√£o de troubleshooting para erro Y

### Changed
- Refatorada documenta√ß√£o de arquitetura
- Atualizado diagrama de fluxo de dados

### Fixed
- Corrigido link quebrado em README
- Atualizado exemplo de autentica√ß√£o
```

### 10. Documenta√ß√£o Antes do Commit

**Workflow obrigat√≥rio:**

```bash
# 1. Fazer mudan√ßa no c√≥digo
git add backend/src/services/new-service.ts

# 2. Criar/Atualizar documenta√ß√£o
git add .system/docs/feature/internal-implementation/01-architecture.md

# 3. Atualizar CHANGELOG
git add .system/CHANGELOG.md

# 4. Commit incluindo tudo
git commit -m "feat(feature): implement new service

- Implement new service X
- Add architecture documentation
- Update changelog"
```

## üöÄ Comandos √öteis

### Criar Nova Estrutura de Documenta√ß√£o

```bash
# Usar script automatizado
./.system/scripts/create-docs-structure.sh stripe-integration

# Resultado: Estrutura completa em .system/docs/stripe-integration/
```

### Verificar Markdown

```bash
# Validar sintaxe de todos os arquivos .md
npx markdownlint-cli .system/docs/**/*.md

# Verificar links quebrados
npx markdown-link-check .system/docs/lnmarkets/README.md
```

### Gerar TOC Autom√°tico

```bash
# Gerar √≠ndice automaticamente
npx markdown-toc -i .system/docs/feature/README.md
```

## üìã Checklist de Qualidade

Antes de marcar documenta√ß√£o como completa:

- [ ] **Metadados**: Status, vers√£o, data, respons√°vel preenchidos
- [ ] **TOC**: √çndice presente e atualizado
- [ ] **Code Snippets**: Testados e funcionais
- [ ] **Exemplos Pr√°ticos**: Inclu√≠dos e reais (n√£o gen√©ricos)
- [ ] **Cross-References**: Links funcionando corretamente
- [ ] **Links para C√≥digo**: Refer√™ncias ao c√≥digo fonte
- [ ] **Typos**: Sem erros ortogr√°ficos
- [ ] **Markdown V√°lido**: Sem erros de sintaxe
- [ ] **Diagramas**: Inclu√≠dos quando necess√°rio
- [ ] **Changelog**: Atualizado em `.system/CHANGELOG.md`
- [ ] **Commit**: Documenta√ß√£o commitada junto com c√≥digo

## üö® Avisos Cr√≠ticos

### ‚ùå NUNCA Fazer

1. **Documenta√ß√£o sem metadados**
   ```markdown
   ‚ùå ERRADO:
   # T√≠tulo
   Conte√∫do...
   
   ‚úÖ CORRETO:
   # T√≠tulo
   > **Status**: Active
   > **√öltima Atualiza√ß√£o**: 2025-01-09
   Conte√∫do...
   ```

2. **Code snippets sem syntax highlighting**
   ````markdown
   ‚ùå ERRADO:
   ```
   const x = 1;
   ```
   
   ‚úÖ CORRETO:
   ```typescript
   const x = 1;
   ```
   ````

3. **Exemplos gen√©ricos**
   ```typescript
   ‚ùå ERRADO:
   const service = new Service();
   
   ‚úÖ CORRETO:
   const lnMarketsService = new LNMarketsAPIv2({
     credentials: realCredentials,
     logger: logger
   });
   ```

4. **Links quebrados**
   ```markdown
   ‚ùå ERRADO:
   Ver [Docs](./non-existent-file.md)
   
   ‚úÖ CORRETO:
   Ver [Architecture](./internal-implementation/01-architecture.md)
   ```

5. **Documenta√ß√£o desatualizada**
   - Sempre atualizar quando c√≥digo mudar
   - Marcar como Deprecated se obsoleto
   - Remover ap√≥s per√≠odo de transi√ß√£o

### ‚úÖ SEMPRE Fazer

1. **Seguir DOCUMENTATION_STANDARDS.md**
2. **Usar .system/docs/lnmarkets/ como refer√™ncia**
3. **Testar code snippets antes de documentar**
4. **Atualizar CHANGELOG.md**
5. **Commitar docs junto com c√≥digo**
6. **Verificar links funcionam**
7. **Incluir metadados completos**
8. **Separar external-api de internal-implementation**
9. **Usar diagramas quando √∫til**
10. **Manter qualidade gold standard**

## üéØ Exemplo de Workflow Completo

```bash
# 1. Criar nova feature
mkdir -p backend/src/services/payment

# 2. Criar documenta√ß√£o automaticamente
./.system/scripts/create-docs-structure.sh payment-integration

# 3. Implementar c√≥digo
vim backend/src/services/payment/payment.service.ts

# 4. Preencher documenta√ß√£o
vim .system/docs/payment-integration/internal-implementation/01-architecture.md
vim .system/docs/payment-integration/internal-implementation/05-examples.md

# 5. Adicionar exemplos testados
npm test -- payment.service.test.ts

# 6. Atualizar CHANGELOG
vim .system/CHANGELOG.md

# 7. Verificar markdown
npx markdownlint-cli .system/docs/payment-integration/**/*.md

# 8. Commit tudo junto
git add backend/src/services/payment .system/docs/payment-integration .system/CHANGELOG.md
git commit -m "feat(payment): implement payment integration

- Implement payment service
- Add complete documentation
- Add examples and tests"

# 9. Push
git push origin feature/payment-integration
```

## üìö Refer√™ncias

- [DOCUMENTATION_STANDARDS.md](../../.system/DOCUMENTATION_STANDARDS.md) - Padr√µes completos
- [.system/docs/lnmarkets/](../../.system/docs/lnmarkets/) - Exemplo gold standard
- [create-docs-structure.sh](../../.system/scripts/create-docs-structure.sh) - Script de cria√ß√£o

---

**√öltima Atualiza√ß√£o**: 2025-01-09  
**Vers√£o**: 1.0.0  
**Respons√°vel**: Sistema de Documenta√ß√£o Axisor
