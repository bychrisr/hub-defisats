#!/bin/bash

# Script para criar super admin via API do backend
# Uso: ./scripts/admin/create-super-admin-api.sh [email] [username] [password]

set -e

# Valores padr√£o
EMAIL=${1:-"admin@axisor.com"}
USERNAME=${2:-"admin"}
PASSWORD=${3:-"Admin123!@#"}

echo "üëë Criando SUPER ADMIN via API..."
echo "üìß Email: $EMAIL"
echo "üë§ Username: $USERNAME"
echo "üîë Password: $PASSWORD"

# Verificar se o backend est√° rodando
if ! docker ps | grep -q "axisor-backend"; then
    echo "‚ùå Container Backend n√£o est√° rodando. Execute 'docker compose up -d' primeiro."
    exit 1
fi

echo "üîê Criando usu√°rio via API..."

# Criar usu√°rio via API de registro
REGISTER_RESPONSE=$(curl -s -X POST http://localhost:13010/api/auth/register \
  -H "Content-Type: application/json" \
  -d "{
    \"email\": \"$EMAIL\",
    \"username\": \"$USERNAME\",
    \"password\": \"$PASSWORD\",
    \"confirmPassword\": \"$PASSWORD\"
  }")

echo "üìã Resposta do registro: $REGISTER_RESPONSE"

# Verificar se o registro foi bem-sucedido
if echo "$REGISTER_RESPONSE" | grep -q "success\|token"; then
    echo "‚úÖ Usu√°rio criado com sucesso via API!"
else
    # Se falhou, pode ser porque o usu√°rio j√° existe
    echo "‚ö†Ô∏è Registro falhou, tentando login..."
fi

echo "üîë Testando login..."
LOGIN_RESPONSE=$(curl -s -X POST http://localhost:13010/api/auth/login \
  -H "Content-Type: application/json" \
  -d "{\"email\": \"$EMAIL\", \"password\": \"$PASSWORD\"}")

echo "üìã Resposta do login: $LOGIN_RESPONSE"

if echo "$LOGIN_RESPONSE" | grep -q "token"; then
    echo "‚úÖ Login funcionando!"
    
    # Extrair token para usar nas pr√≥ximas requisi√ß√µes
    TOKEN=$(echo "$LOGIN_RESPONSE" | jq -r '.token' 2>/dev/null || echo "")
    
    if [ -n "$TOKEN" ] && [ "$TOKEN" != "null" ]; then
        echo "üé´ Token obtido: ${TOKEN:0:20}..."
        
        echo "üëë Criando permiss√µes de super admin..."
        
        # Atualizar plano para lifetime
        echo "üíé Atualizando plano para lifetime..."
        PLAN_RESPONSE=$(curl -s -X PUT http://localhost:13010/api/user/plan \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $TOKEN" \
          -d "{\"plan_type\": \"lifetime\"}")
        
        echo "üìã Resposta do plano: $PLAN_RESPONSE"
        
        # Criar permiss√µes de admin diretamente no banco
        echo "üëë Criando permiss√µes de super admin no banco..."
        USER_ID=$(docker exec axisor-postgres psql -U axisor -d axisor -t -c "SELECT id FROM \"User\" WHERE email = '$EMAIL';" | tr -d ' \n')
        
        if [ -n "$USER_ID" ]; then
            docker exec axisor-postgres psql -U axisor -d axisor -c "
            INSERT INTO \"AdminUser\" (
              id,
              user_id,
              role,
              created_at
            ) VALUES (
              gen_random_uuid()::text,
              '$USER_ID',
              'superadmin',
              NOW()
            ) ON CONFLICT (user_id) DO UPDATE SET
              role = 'superadmin';
            "
            echo "‚úÖ Permiss√µes de super admin criadas!"
        else
            echo "‚ùå N√£o foi poss√≠vel obter o ID do usu√°rio"
        fi
        
        echo ""
        echo "üéâ SUCESSO! Super admin criado com sucesso!"
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        echo "üåê Acesse: http://localhost:13000"
        echo "üìß Email: $EMAIL"
        echo "üîë Password: $PASSWORD"
        echo "üëë Acesso: Painel de administra√ß√£o dispon√≠vel"
        echo "üîì Sem necessidade de API Keys LN Markets"
        echo "üíé Plano: Lifetime (todas as funcionalidades)"
        echo "üé´ Token: ${TOKEN:0:30}..."
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    else
        echo "‚ùå N√£o foi poss√≠vel obter o token"
    fi
else
    echo "‚ùå Erro no login:"
    echo "$LOGIN_RESPONSE" | jq . 2>/dev/null || echo "$LOGIN_RESPONSE"
    
    echo ""
    echo "üîç Verificando se o usu√°rio existe no banco..."
    docker exec axisor-postgres psql -U axisor -d axisor -c "SELECT id, email, username, is_active, email_verified, plan_type FROM \"User\" WHERE email = '$EMAIL';"
fi

echo ""
echo "üèÅ Script finalizado!"
