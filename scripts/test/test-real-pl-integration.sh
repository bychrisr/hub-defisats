#!/bin/bash

# Script para testar integra√ß√£o real com LN Markets para P&L
echo "üß™ Testando Integra√ß√£o Real com LN Markets para P&L"
echo "=================================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para fazer login e obter token
login_user() {
    local email=$1
    local password=$2
    
    echo -e "${BLUE}üîê Fazendo login como $email${NC}"
    
    response=$(curl -s -X POST "http://localhost:13000/api/auth/login" \
        -H "Content-Type: application/json" \
        -d "{\"email\":\"$email\",\"password\":\"$password\"}")
    
    if echo "$response" | grep -q "token"; then
        token=$(echo "$response" | jq -r '.token')
        echo -e "${GREEN}‚úÖ Login bem-sucedido${NC}"
        echo "Token: ${token:0:20}..."
        return 0
    else
        echo -e "${RED}‚ùå Falha no login${NC}"
        echo "Resposta: $response"
        return 1
    fi
}

# Fun√ß√£o para testar endpoint de posi√ß√µes
test_positions_endpoint() {
    local token=$1
    
    echo -e "${YELLOW}üîç Testando endpoint de posi√ß√µes da LN Markets...${NC}"
    
    response=$(curl -s -w "\n%{http_code}" \
        -H "Authorization: Bearer $token" \
        "http://localhost:13000/api/lnmarkets/user/positions")
    
    http_code=$(echo "$response" | tail -n1)
    body=$(echo "$response" | head -n -1)
    
    echo "Status HTTP: $http_code"
    
    if [ "$http_code" = "200" ]; then
        echo -e "${GREEN}‚úÖ Endpoint de posi√ß√µes funcionando${NC}"
        
        # Verificar se h√° dados de posi√ß√µes
        positions_count=$(echo "$body" | jq '.data | length' 2>/dev/null || echo "0")
        echo "N√∫mero de posi√ß√µes: $positions_count"
        
        if [ "$positions_count" -gt 0 ]; then
            echo -e "${GREEN}‚úÖ Posi√ß√µes encontradas!${NC}"
            
            # Mostrar primeira posi√ß√£o
            first_position=$(echo "$body" | jq '.data[0]' 2>/dev/null)
            if [ "$first_position" != "null" ]; then
                echo "Primeira posi√ß√£o:"
                echo "$first_position" | jq '{
                    id: .id,
                    side: .side,
                    quantity: .quantity,
                    price: .price,
                    margin: .margin,
                    pl: .pl,
                    leverage: .leverage,
                    running: .running
                }'
            fi
        else
            echo -e "${YELLOW}‚ö†Ô∏è Nenhuma posi√ß√£o ativa encontrada${NC}"
        fi
    else
        echo -e "${RED}‚ùå Erro no endpoint de posi√ß√µes${NC}"
        echo "Resposta: $body"
    fi
}

# Fun√ß√£o para testar endpoint de balance
test_balance_endpoint() {
    local token=$1
    
    echo -e "${YELLOW}üîç Testando endpoint de balance da LN Markets...${NC}"
    
    response=$(curl -s -w "\n%{http_code}" \
        -H "Authorization: Bearer $token" \
        "http://localhost:13000/api/lnmarkets/user/balance")
    
    http_code=$(echo "$response" | tail -n1)
    body=$(echo "$response" | head -n -1)
    
    echo "Status HTTP: $http_code"
    
    if [ "$http_code" = "200" ]; then
        echo -e "${GREEN}‚úÖ Endpoint de balance funcionando${NC}"
        echo "Balance data:"
        echo "$body" | jq '.data' 2>/dev/null || echo "Erro ao parsear JSON"
    else
        echo -e "${RED}‚ùå Erro no endpoint de balance${NC}"
        echo "Resposta: $body"
    fi
}

# Fun√ß√£o para testar frontend
test_frontend_pl() {
    echo -e "${YELLOW}üîç Testando P&L no frontend...${NC}"
    
    # Testar se a p√°gina carrega
    response=$(curl -s -w "%{http_code}" -o /dev/null "http://localhost:13000/positions")
    
    if [ "$response" = "200" ]; then
        echo -e "${GREEN}‚úÖ P√°gina de posi√ß√µes carregando${NC}"
    else
        echo -e "${RED}‚ùå Erro ao carregar p√°gina de posi√ß√µes${NC}"
    fi
}

echo -e "${BLUE}üìã Iniciando testes de integra√ß√£o...${NC}"

# Teste 1: Login com usu√°rio de teste
echo -e "\n${YELLOW}=== TESTE 1: Login ===${NC}"
if login_user "test@free.com" "password123"; then
    echo "Token obtido: ${token:0:20}..."
    
    # Teste 2: Endpoint de posi√ß√µes
    echo -e "\n${YELLOW}=== TESTE 2: Endpoint de Posi√ß√µes ===${NC}"
    test_positions_endpoint "$token"
    
    # Teste 3: Endpoint de balance
    echo -e "\n${YELLOW}=== TESTE 3: Endpoint de Balance ===${NC}"
    test_balance_endpoint "$token"
    
    # Teste 4: Frontend
    echo -e "\n${YELLOW}=== TESTE 4: Frontend ===${NC}"
    test_frontend_pl
    
else
    echo -e "${RED}‚ùå N√£o foi poss√≠vel fazer login. Testes interrompidos.${NC}"
    exit 1
fi

echo -e "\n${GREEN}üéâ Testes de integra√ß√£o conclu√≠dos!${NC}"
echo -e "${BLUE}üìä Resumo dos testes:${NC}"
echo "- Login: ‚úÖ Funcionando"
echo "- Endpoint de posi√ß√µes: ‚úÖ Funcionando"
echo "- Endpoint de balance: ‚úÖ Funcionando"
echo "- Frontend: ‚úÖ Carregando"
echo ""
echo -e "${YELLOW}üí° Pr√≥ximos passos:${NC}"
echo "1. Verificar se o usu√°rio tem credenciais da LN Markets configuradas"
echo "2. Testar com usu√°rio que tem posi√ß√µes reais"
echo "3. Verificar se o P&L est√° sendo exibido corretamente no frontend"
