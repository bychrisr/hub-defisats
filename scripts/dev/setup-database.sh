#!/bin/bash

# üóÑÔ∏è Script Principal para Configura√ß√£o do Banco de Dados
# Combina corre√ß√£o de migra√ß√µes e popula√ß√£o de dados

set -e

echo "üóÑÔ∏è Hub DeFiSATS - Database Setup"
echo "================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Verificar se estamos no diret√≥rio correto
if [ ! -f "config/docker/docker-compose.dev.yml" ]; then
    log_error "Execute este script a partir da raiz do projeto"
    exit 1
fi

# Fun√ß√£o para verificar containers
check_containers() {
    log_info "Verificando containers..."
    
    if ! docker ps | grep -q "axisor-postgres"; then
        log_error "Container PostgreSQL n√£o est√° rodando"
        log_info "Execute: docker compose -f config/docker/docker-compose.dev.yml up -d"
        exit 1
    fi
    
    if ! docker ps | grep -q "axisor-backend"; then
        log_error "Container Backend n√£o est√° rodando"
        log_info "Execute: docker compose -f config/docker/docker-compose.dev.yml up -d"
        exit 1
    fi
    
    log_success "Containers est√£o rodando"
}

# Fun√ß√£o para corrigir migra√ß√µes
fix_migrations() {
    log_info "üîß Corrigindo problemas de migra√ß√£o..."
    
    # Parar backend temporariamente
    log_info "Parando backend..."
    docker compose -f config/docker/docker-compose.dev.yml stop backend
    
    # Resetar banco de dados
    log_info "Resetando banco de dados..."
    docker compose -f config/docker/docker-compose.dev.yml run --rm backend npx prisma migrate reset --force
    
    # Aplicar schema diretamente (bypass migra√ß√µes)
    log_info "Aplicando schema diretamente..."
    docker compose -f config/docker/docker-compose.dev.yml run --rm backend npx prisma db push
    
    # Marcar migra√ß√µes como aplicadas
    log_info "Marcando migra√ß√µes como aplicadas..."
    docker compose -f config/docker/docker-compose.dev.yml run --rm backend npx prisma migrate resolve --applied 20250924164514_init
    docker compose -f config/docker/docker-compose.dev.yml run --rm backend npx prisma migrate resolve --applied 20250925013108_add_missing_tables
    docker compose -f config/docker/docker-compose.dev.yml run --rm backend npx prisma migrate resolve --applied 20250928055655_add_registration_progress
    docker compose -f config/docker/docker-compose.dev.yml run --rm backend npx prisma migrate resolve --applied 20250929000756_add_user_name_and_marketing_fields
    docker compose -f config/docker/docker-compose.dev.yml run --rm backend npx prisma migrate resolve --applied 20250126_add_user_preferences
    
    # Reiniciar backend
    log_info "Reiniciando backend..."
    docker compose -f config/docker/docker-compose.dev.yml start backend
    
    # Aguardar backend ficar saud√°vel
    log_info "Aguardando backend ficar saud√°vel..."
    sleep 30
    
    log_success "Migra√ß√µes corrigidas com sucesso!"
}

# Fun√ß√£o para popular banco
populate_database() {
    log_info "üå± Populando banco de dados..."
    
    # Lista de seeders dispon√≠veis
    local seeders=(
        "rate-limit-config:Configura√ß√µes de rate limiting"
        "admin-user:Usu√°rios administrativos padr√£o"
        "plans:Planos de assinatura"
        "health-check:Configura√ß√µes de health check"
        "exchanges:Configura√ß√µes de exchanges"
    )
    
    local success_count=0
    local total_count=${#seeders[@]}
    
    for seeder_info in "${seeders[@]}"; do
        IFS=':' read -r seeder_name description <<< "$seeder_info"
        
        log_info "Executando seeder: $seeder_name"
        log_info "Descri√ß√£o: $description"
        
        if docker compose -f config/docker/docker-compose.dev.yml run --rm backend npm run "seed:$seeder_name"; then
            log_success "Seeder $seeder_name executado com sucesso"
            ((success_count++))
        else
            log_error "Falha ao executar seeder $seeder_name"
        fi
        
        echo "" # Linha em branco para separar
    done
    
    log_info "üìä Resultado: $success_count/$total_count seeders executados com sucesso"
    
    if [ $success_count -eq $total_count ]; then
        log_success "Todos os seeders foram executados com sucesso!"
    else
        log_warning "Alguns seeders falharam. Verifique os logs acima."
    fi
}

# Fun√ß√£o para mostrar informa√ß√µes dos dados
show_data_info() {
    echo ""
    echo "üìä DADOS QUE SER√ÉO POPULADOS:"
    echo "============================"
    echo ""
    echo "üîê ADMIN USERS:"
    echo "  ‚Ä¢ admin@axisor.com (superadmin) - Senha: Admin123!@#"
    echo "  ‚Ä¢ support@axisor.com (admin) - Senha: Support123!@#"
    echo ""
    echo "üí∞ PLANS:"
    echo "  ‚Ä¢ Free - $0/m√™s - 3 posi√ß√µes, 1 automa√ß√£o"
    echo "  ‚Ä¢ Pro - $29.99/m√™s - 10 posi√ß√µes, 5 automa√ß√µes"
    echo "  ‚Ä¢ Enterprise - $99.99/m√™s - Ilimitado"
    echo "  ‚Ä¢ Pro Annual - $299.99/ano - Desconto anual"
    echo ""
    echo "‚öôÔ∏è  RATE LIMITS:"
    echo "  ‚Ä¢ Configura√ß√µes para development, staging, production"
    echo "  ‚Ä¢ Limites por tipo de endpoint (auth, api, trading, etc.)"
    echo ""
    echo "üè• HEALTH CHECK:"
    echo "  ‚Ä¢ Configura√ß√µes de monitoramento"
    echo "  ‚Ä¢ Alertas de sistema"
    echo ""
    echo "üè¶ EXCHANGES:"
    echo "  ‚Ä¢ Configura√ß√µes de exchanges suportadas"
    echo "  ‚Ä¢ APIs e credenciais padr√£o"
    echo ""
}

# Fun√ß√£o para verificar status final
check_final_status() {
    log_info "üîç Verificando status final..."
    
    # Verificar se backend est√° saud√°vel
    if docker compose -f config/docker/docker-compose.dev.yml ps | grep -q "axisor-backend.*healthy"; then
        log_success "Backend est√° saud√°vel"
    else
        log_warning "Backend pode n√£o estar totalmente saud√°vel"
    fi
    
    # Verificar se frontend est√° rodando
    if docker compose -f config/docker/docker-compose.dev.yml ps | grep -q "axisor-frontend"; then
        log_success "Frontend est√° rodando"
    else
        log_warning "Frontend n√£o est√° rodando"
    fi
    
    # Testar API
    log_info "Testando API..."
    if curl -s "http://localhost:13010/api/version" > /dev/null; then
        log_success "API est√° respondendo"
    else
        log_warning "API pode n√£o estar respondendo"
    fi
    
    # Testar Frontend
    log_info "Testando Frontend..."
    if curl -s -I "http://localhost:13000" | head -1 | grep -q "200 OK"; then
        log_success "Frontend est√° respondendo"
    else
        log_warning "Frontend pode n√£o estar respondendo"
    fi
}

# Fun√ß√£o principal
main() {
    log_info "üöÄ Iniciando configura√ß√£o completa do banco de dados..."
    
    # Verificar containers
    check_containers
    
    # Mostrar informa√ß√µes dos dados
    show_data_info
    
    # Perguntar se deve continuar
    echo ""
    read -p "Deseja continuar com a popula√ß√£o do banco? (y/N): " confirm
    if [[ ! $confirm =~ ^[Yy]$ ]]; then
        log_info "Opera√ß√£o cancelada pelo usu√°rio"
        exit 0
    fi
    
    # Corrigir migra√ß√µes
    fix_migrations
    
    # Popular banco
    populate_database
    
    # Verificar status final
    check_final_status
    
    log_success "üéâ Configura√ß√£o do banco de dados conclu√≠da!"
    echo ""
    log_info "üåê Acessos:"
    log_info "  ‚Ä¢ Frontend: http://localhost:13000"
    log_info "  ‚Ä¢ Backend API: http://localhost:13010"
    log_info "  ‚Ä¢ Swagger Docs: http://localhost:13010/docs"
    echo ""
    log_info "üîê Usu√°rios criados:"
    log_info "  ‚Ä¢ admin@axisor.com (superadmin) - Senha: Admin123!@#"
    log_info "  ‚Ä¢ support@axisor.com (admin) - Senha: Support123!@#"
}

# Executar fun√ß√£o principal
main
