// backend/src/workers/MarginGuardWorker.ts
import { PrismaClient } from '@prisma/client';
import { AutomationService, MarginGuardConfig } from '../services/AutomationService';

const prisma = new PrismaClient();
const automationService = new AutomationService();

interface MarginGuardJobData {
  userId: string;
  automationId: string;
  config: MarginGuardConfig;
}

/**
 * Worker que monitora usu√°rios com Margin Guard ativo
 * e executa a√ß√µes na LN Markets quando os crit√©rios s√£o atendidos
 */
export class MarginGuardWorker {
  private isRunning = false;
  private intervalId: NodeJS.Timeout | null = null;

  /**
   * Inicia o worker de monitoramento
   */
  start(intervalMs: number = 20000) {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è MARGIN GUARD WORKER - Worker j√° est√° rodando');
      return;
    }

    console.log(`üöÄ MARGIN GUARD WORKER - Iniciando worker (intervalo: ${intervalMs}ms)`);
    this.isRunning = true;

    this.intervalId = setInterval(async () => {
      await this.processAllActiveUsers();
    }, intervalMs);

    // Executar imediatamente na primeira vez
    this.processAllActiveUsers();
  }

  /**
   * Para o worker de monitoramento
   */
  stop() {
    if (!this.isRunning) {
      console.log('‚ö†Ô∏è MARGIN GUARD WORKER - Worker n√£o est√° rodando');
      return;
    }

    console.log('üõë MARGIN GUARD WORKER - Parando worker');
    this.isRunning = false;

    if (this.intervalId) {
      clearInterval(this.intervalId);
      this.intervalId = null;
    }
  }

  /**
   * Processa todos os usu√°rios com Margin Guard ativo
   */
  private async processAllActiveUsers() {
    try {
      console.log('üîç MARGIN GUARD WORKER - Buscando usu√°rios ativos...');
      
      const activeUsers = await automationService.getActiveUsers();
      console.log(`üìä MARGIN GUARD WORKER - Encontrados ${activeUsers.length} usu√°rios ativos`);

      for (const user of activeUsers) {
        await this.processUser(user);
      }

      console.log('‚úÖ MARGIN GUARD WORKER - Processamento conclu√≠do');
    } catch (error) {
      console.error('‚ùå MARGIN GUARD WORKER - Erro no processamento geral:', error);
    }
  }

  /**
   * Processa um usu√°rio espec√≠fico
   */
  private async processUser(user: { userId: string; automationId: string; config: MarginGuardConfig }) {
    const { userId, config } = user;
    
    try {
      console.log(`üîç MARGIN GUARD WORKER - Processando usu√°rio ${userId}`);

      // 1. Obter dados do usu√°rio
      const userRecord = await prisma.user.findUnique({ 
        where: { id: userId },
        select: { email: true }
      });

      if (!userRecord) {
        console.error(`‚ùå MARGIN GUARD WORKER - Usu√°rio n√£o encontrado: ${userId}`);
        return;
      }

      // TODO: Implementar obten√ß√£o das credenciais LN Markets do usu√°rio
      // Por enquanto, vamos simular que temos as credenciais
      console.log(`üîë MARGIN GUARD WORKER - Processando usu√°rio ${userRecord.email}`);

      // 2. Simular obten√ß√£o de posi√ß√µes ativas e pre√ßo atual
      // TODO: Implementar integra√ß√£o real com LN Markets
      const mockTrades = [
        {
          id: 'trade-1',
          entry_price: 50000,
          liquidation: 45000,
          margin: 100000, // 100k sats
        }
      ];

      const mockTicker = {
        lastPrice: 48000, // Pre√ßo atual
      };

      console.log(`üìà MARGIN GUARD WORKER - Pre√ßo atual: $${mockTicker.lastPrice}, Posi√ß√µes: ${mockTrades.length}`);

      // 3. Para cada posi√ß√£o, verificar crit√©rios
      for (const trade of mockTrades) {
        await this.checkTradeCriteria(userId, trade, mockTicker, config);
      }

    } catch (error) {
      console.error(`‚ùå MARGIN GUARD WORKER - Erro ao processar usu√°rio ${userId}:`, error);
    }
  }

  /**
   * Verifica crit√©rios para uma posi√ß√£o espec√≠fica
   */
  private async checkTradeCriteria(
    userId: string, 
    trade: any, 
    ticker: any, 
    config: MarginGuardConfig
  ) {
    try {
      const distanceToLiquidation = Math.abs(trade.entry_price - trade.liquidation);
      const currentDistance = Math.abs(ticker.lastPrice - trade.liquidation);

      const thresholdRatio = 1 - (config.threshold / 100);
      const currentRatio = currentDistance / distanceToLiquidation;

      console.log(`üìä MARGIN GUARD WORKER - Trade ${trade.id}:`, {
        entryPrice: trade.entry_price,
        liquidation: trade.liquidation,
        currentPrice: ticker.lastPrice,
        thresholdRatio,
        currentRatio,
        threshold: config.threshold
      });

      if (currentRatio <= thresholdRatio) {
        console.log(`üö® MARGIN GUARD WORKER - Crit√©rio de acionamento atingido para trade ${trade.id} do usu√°rio ${userId}`);
        
        // Executar a√ß√£o configurada
        await this.executeAction(userId, trade, config);
      } else {
        console.log(`‚úÖ MARGIN GUARD WORKER - Trade ${trade.id} dentro dos limites (${(currentRatio * 100).toFixed(1)}% da dist√¢ncia)`);
      }

    } catch (error) {
      console.error(`‚ùå MARGIN GUARD WORKER - Erro ao verificar crit√©rios do trade ${trade.id}:`, error);
    }
  }

  /**
   * Executa a a√ß√£o configurada
   */
  private async executeAction(userId: string, trade: any, config: MarginGuardConfig) {
    try {
      console.log(`üéØ MARGIN GUARD WORKER - Executando a√ß√£o ${config.action} para trade ${trade.id}`);

      switch (config.action) {
        case 'add_margin':
          const amountToAdd = Math.floor(trade.margin * ((config.add_margin_amount || 20) / 100));
          console.log(`üí∞ MARGIN GUARD WORKER - Adicionando ${amountToAdd} sats √† posi√ß√£o ${trade.id}`);
          // TODO: Implementar chamada real para LN Markets
          // await lnClient.addMargin({ id: trade.id, amount: amountToAdd });
          break;

        case 'close_position':
          console.log(`üîí MARGIN GUARD WORKER - Fechando posi√ß√£o ${trade.id}`);
          // TODO: Implementar chamada real para LN Markets
          // await lnClient.closeTrade({ id: trade.id });
          break;

        case 'reduce_position':
          const amountToReduce = Math.floor(trade.margin * ((config.reduce_percentage || 20) / 100));
          console.log(`üí∏ MARGIN GUARD WORKER - Reduzindo ${amountToReduce} sats da posi√ß√£o ${trade.id}`);
          // TODO: Implementar chamada real para LN Markets
          // await lnClient.cashIn({ id: trade.id, amount: amountToReduce });
          break;

        default:
          console.warn(`‚ö†Ô∏è MARGIN GUARD WORKER - A√ß√£o desconhecida: ${config.action}`);
      }

      // TODO: Registrar execu√ß√£o no banco de dados para hist√≥rico
      console.log(`‚úÖ MARGIN GUARD WORKER - A√ß√£o ${config.action} executada com sucesso para trade ${trade.id}`);

    } catch (error) {
      console.error(`‚ùå MARGIN GUARD WORKER - Erro ao executar a√ß√£o para trade ${trade.id}:`, error);
    }
  }

  /**
   * Status do worker
   */
  getStatus() {
    return {
      isRunning: this.isRunning,
      intervalId: this.intervalId !== null,
    };
  }
}

// Inst√¢ncia global do worker
export const marginGuardWorker = new MarginGuardWorker();
