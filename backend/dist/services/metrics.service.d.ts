import { Counter, Histogram, Gauge } from 'prom-client';
export declare class MetricsService {
    private static instance;
    private isInitialized;
    readonly httpRequestsTotal: Counter<string>;
    readonly httpRequestDuration: Histogram<string>;
    readonly httpRequestSize: Histogram<string>;
    readonly httpResponseSize: Histogram<string>;
    readonly authAttemptsTotal: Counter<string>;
    readonly authSuccessTotal: Counter<string>;
    readonly authFailuresTotal: Counter<string>;
    readonly rateLimitHitsTotal: Counter<string>;
    readonly rateLimitBlocksTotal: Counter<string>;
    readonly dbConnectionsActive: Gauge<string>;
    readonly dbQueriesTotal: Counter<string>;
    readonly dbQueryDuration: Histogram<string>;
    readonly lnMarketsApiCallsTotal: Counter<string>;
    readonly lnMarketsApiDuration: Histogram<string>;
    readonly lnMarketsApiErrorsTotal: Counter<string>;
    readonly workerJobsTotal: Counter<string>;
    readonly workerJobDuration: Histogram<string>;
    readonly workerJobFailuresTotal: Counter<string>;
    readonly memoryUsage: Gauge<string>;
    readonly cpuUsage: Gauge<string>;
    readonly activeUsers: Gauge<string>;
    private constructor();
    static getInstance(): MetricsService;
    initialize(): void;
    private startSystemMetricsCollection;
    recordAuthAttempt(type: string, result: 'success' | 'failure', reason?: string): void;
    recordRateLimitHit(type: string, identifier: string): void;
    recordRateLimitBlock(type: string, identifier: string): void;
    recordDbQuery(operation: string, table: string, duration: number): void;
    recordLnMarketsApiCall(endpoint: string, status: 'success' | 'error', duration: number, errorType?: string): void;
    recordWorkerJob(workerType: string, status: 'success' | 'failure', duration: number, errorType?: string): void;
    updateActiveUsers(count: number): void;
    getMetrics(): Promise<string>;
    getMetricsAsJSON(): Promise<any>;
    clearMetrics(): void;
}
export declare const metrics: MetricsService;
//# sourceMappingURL=metrics.service.d.ts.map