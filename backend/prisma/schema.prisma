generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         String               @id @default(dbgenerated("(gen_random_uuid())::text"))
  email                      String               @unique
  username                   String               @unique
  password_hash              String?
  social_provider            String?
  social_id                  String?
  ln_markets_api_key         String?
  ln_markets_api_secret      String?
  last_activity_at           DateTime?            @db.Timestamp(6)
  created_at                 DateTime             @default(now()) @db.Timestamp(6)
  updated_at                 DateTime             @default(now()) @db.Timestamp(6)
  is_active                  Boolean              @default(true)
  session_expires_at         DateTime?            @db.Timestamp(6)
  email_verified             Boolean?             @default(false)
  email_verification_token   String?
  email_verification_expires DateTime?            @db.Timestamp(6)
  password_reset_token       String?
  password_reset_expires     DateTime?            @db.Timestamp(6)
  two_factor_enabled         Boolean?             @default(false)
  two_factor_secret          String?
  two_factor_backup_codes    Json?
  login_attempts             Int?                 @default(0)
  locked_until               DateTime?            @db.Timestamp(6)
  last_login_ip              String?
  last_login_user_agent      String?
  last_login_at              DateTime?            @db.Timestamp(6)
  ln_markets_passphrase      String?              @db.VarChar(255)
  plan_type                  PlanType             @default(free)
  preferences                Json?
  admin_user                 AdminUser?
  automations                Automation[]
  backtest_reports           BacktestReport[]
  notifications              Notification[]
  payments                   Payment[]
  trade_logs                 TradeLog[]
  user_coupons               UserCoupon[]         @relation("UserCouponRelation")
  upgrades_made              UserUpgradeHistory[] @relation("AdminUpgradeHistory")
  upgrade_history            UserUpgradeHistory[] @relation("UserUpgradeHistory")
  simulations                Simulation[]
  notification_logs          NotificationLog[]

  @@index([email], map: "idx_user_email")
  @@index([email_verification_token], map: "idx_user_email_verification_token")
  @@index([password_reset_token], map: "idx_user_password_reset_token")
}

model Automation {
  id         String     @id @default(dbgenerated("(gen_random_uuid())::text"))
  user_id    String
  type       String
  config     Json
  is_active  Boolean    @default(true)
  created_at DateTime   @default(now()) @db.Timestamp(6)
  updated_at DateTime   @default(now()) @db.Timestamp(6)
  user       User       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  trade_logs TradeLog[]

  @@index([user_id], map: "idx_automation_user_id")
}

model TradeLog {
  id            String      @id @default(dbgenerated("(gen_random_uuid())::text"))
  user_id       String
  automation_id String?
  /// LN Markets trade ID
  trade_id      String
  status        String
  error_message String?
  executed_at   DateTime    @db.Timestamp(6)
  created_at    DateTime    @default(now()) @db.Timestamp(6)
  automation    Automation? @relation(fields: [automation_id], references: [id], onUpdate: NoAction)
  user          User        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([automation_id], map: "idx_tradelog_automation_id")
  @@index([user_id], map: "idx_tradelog_user_id")
}

model Notification {
  id             String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  user_id        String
  type           String
  is_enabled     Boolean  @default(true)
  channel_config Json
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @db.Timestamp(6)
  user           User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  logs           NotificationLog[]

  @@index([user_id], map: "idx_notification_user_id")
}

model Payment {
  id                String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  user_id           String
  amount_sats       Int
  lightning_invoice String
  status            String
  paid_at           DateTime? @db.Timestamp(6)
  created_at        DateTime  @default(now()) @db.Timestamp(6)
  updated_at        DateTime  @default(now()) @db.Timestamp(6)
  plan_type         PlanType
  description       String?
  expires_at        DateTime? @db.Timestamp(6)
  payment_hash      String?
  preimage          String?
  expiry_seconds    Int?
  user              User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id], map: "idx_payment_user_id")
  @@index([payment_hash])
  @@index([expires_at])
}

model BacktestReport {
  id         String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  user_id    String
  config     Json
  result     Json
  created_at DateTime @default(now()) @db.Timestamp(6)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id], map: "idx_backtestreport_user_id")
}

model AdminUser {
  id         String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  user_id    String   @unique
  role       String
  created_at DateTime @default(now()) @db.Timestamp(6)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id], map: "idx_adminuser_user_id")
}

model Coupon {
  id                  String       @id @default(dbgenerated("(gen_random_uuid())::text"))
  code                String       @unique
  usage_limit         Int?         @default(1)
  used_count          Int?         @default(0)
  expires_at          DateTime?    @db.Timestamp(6)
  value_type          String
  value_amount        Int
  time_type           String
  time_days           Int?
  is_active           Boolean      @default(true)
  description         String?
  created_by          String?
  total_revenue_saved Int          @default(0)
  new_users_count     Int          @default(0)
  conversion_rate     Float        @default(0)
  created_at          DateTime     @default(now()) @db.Timestamp(6)
  updated_at          DateTime     @default(now()) @db.Timestamp(6)
  plan_type           PlanType
  user_coupons        UserCoupon[] @relation("CouponUserRelation")

  @@index([code], map: "idx_coupon_code")
  @@index([is_active], map: "idx_coupon_active")
  @@index([created_at], map: "idx_coupon_created")
}

model SystemAlert {
  id         String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  message    String
  severity   String
  is_global  Boolean  @default(false)
  created_at DateTime @default(now()) @db.Timestamp(6)
}

/// Join table for User-Coupon N:N relationship
/// Each user can redeem a coupon once
model UserCoupon {
  user_id   String
  coupon_id String
  used_at   DateTime @default(now()) @db.Timestamp(6)
  coupon    Coupon   @relation("CouponUserRelation", fields: [coupon_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user      User     @relation("UserCouponRelation", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, coupon_id])
}

/// Modelo para rastrear m√©tricas de cupons
model CouponAnalytics {
  id                 String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  coupon_id          String
  date               DateTime @db.Timestamp(6)
  views_count        Int      @default(0)
  clicks_count       Int      @default(0)
  uses_count         Int      @default(0)
  new_users_count    Int      @default(0)
  revenue_saved      Int      @default(0)
  conversion_rate    Float    @default(0)
  click_through_rate Float    @default(0)
  created_at         DateTime @default(now()) @db.Timestamp(6)

  @@unique([coupon_id, date], map: "idx_coupon_analytics_unique")
  @@index([coupon_id], map: "idx_coupon_analytics_coupon")
  @@index([date], map: "idx_coupon_analytics_date")
}

model MenuItem {
  id          String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  name        String
  mobileName  String?
  href        String
  icon        String
  order       Int
  isActive    Boolean  @default(true)
  isVisible   Boolean  @default(true)
  target      String   @default("_self")
  badge       String?
  badgeColor  String?
  description String?
  menuTypeId  String
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  menuType    MenuType @relation(fields: [menuTypeId], references: [id])

  @@index([menuTypeId])
  @@index([order])
  @@index([isActive, isVisible])
}

model MenuType {
  id          String     @id @default(dbgenerated("(gen_random_uuid())::text"))
  name        String     @unique
  displayName String
  description String?
  isActive    Boolean    @default(true)
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  menuItems   MenuItem[]
}

model SystemConfig {
  id          String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  key         String   @unique
  value       String
  type        String   @default("string")
  description String?
  isActive    Boolean  @default(true)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)

  @@index([key])
  @@index([isActive])
}

model UserUpgradeHistory {
  id             String   @id @default(dbgenerated("gen_random_uuid()"))
  user_id        String
  old_plan       String
  new_plan       String
  reason         String
  effective_date DateTime @db.Timestamp(6)
  upgraded_by    String
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @db.Timestamp(6)
  admin          User     @relation("AdminUpgradeHistory", fields: [upgraded_by], references: [id], onDelete: SetNull)
  user           User     @relation("UserUpgradeHistory", fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([upgraded_by])
  @@index([created_at])
  @@index([new_plan])
  @@map("user_upgrade_history")
}

enum PlanType {
  free
  basic
  advanced
  pro
  lifetime
}

// Sistema de Tooltips e Cards Configur√°veis
model DashboardCard {
  id                String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  key               String   @unique // Chave √∫nica para identificar o card (ex: "total_margin", "estimated_fees")
  title             String   // T√≠tulo do card
  description       String?  // Descri√ß√£o/tooltip do card
  icon              String?  // Nome do √≠cone (ex: "Wallet", "DollarSign")
  category          String?  // Categoria do card (ex: "positions", "history", "balance")
  order_index       Int      @default(0) // Ordem de exibi√ß√£o
  is_active         Boolean  @default(true) // Se o card est√° ativo
  is_admin_only     Boolean  @default(false) // Se √© vis√≠vel apenas para admins
  created_at        DateTime @default(now()) @db.Timestamp(6)
  updated_at        DateTime @default(now()) @db.Timestamp(6)
  created_by        String?  // ID do admin que criou
  updated_by        String?  // ID do admin que atualizou

  @@index([category])
  @@index([is_active])
  @@index([order_index])
  @@map("dashboard_cards")
}

model TooltipConfig {
  id                String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  card_key          String   @unique // Chave do card associado
  tooltip_text      String   // Texto do tooltip
  tooltip_position  String   @default("top") // Posi√ß√£o do tooltip (top, bottom, left, right)
  is_enabled        Boolean  @default(true) // Se o tooltip est√° habilitado
  created_at        DateTime @default(now()) @db.Timestamp(6)
  updated_at        DateTime @default(now()) @db.Timestamp(6)
  created_by        String?  // ID do admin que criou
  updated_by        String?  // ID do admin que atualizou

  @@index([card_key])
  @@index([is_enabled])
  @@map("tooltip_configs")
}

// Tabela de Planos
model Plan {
  id            String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  name          String   @unique
  slug          String   @unique
  description   String?
  price_sats    Int      @default(0)
  price_monthly Int?
  price_yearly  Int?
  features      Json?    // Array de features do plano
  is_active     Boolean  @default(true)
  order         Int      @default(0)
  stripe_price_id String?
  has_api_access Boolean @default(false)
  has_advanced  Boolean  @default(false)
  has_priority  Boolean  @default(false)
  max_notifications Int  @default(0)
  created_at    DateTime @default(now()) @db.Timestamp(6)
  updated_at    DateTime @default(now()) @db.Timestamp(6)

  @@index([slug])
  @@index([is_active])
  @@index([order])
  @@map("plans")
}

// Tabela de Simula√ß√µes
model Simulation {
  id              String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  user_id         String
  name            String
  description     String?
  config          Json     // Configura√ß√£o da simula√ß√£o
  status          String   @default("pending") // pending, running, completed, failed
  automation_type String?
  price_scenario  String?
  duration        Int?
  initial_price   Float?
  started_at      DateTime? @db.Timestamp(6)
  created_at      DateTime @default(now()) @db.Timestamp(6)
  updated_at      DateTime @default(now()) @db.Timestamp(6)
  completed_at    DateTime? @db.Timestamp(6)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  results SimulationResult[]

  @@index([user_id])
  @@index([status])
  @@index([automation_type])
  @@map("simulations")
}

// Tabela de Resultados de Simula√ß√£o
model SimulationResult {
  id            String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  simulation_id String
  result_data   Json     // Dados do resultado
  timestamp     DateTime @default(now()) @db.Timestamp(6)
  action_type   String?
  success_rate  Float?
  pnl           Float?
  account_balance Float?
  created_at    DateTime @default(now()) @db.Timestamp(6)

  simulation Simulation @relation(fields: [simulation_id], references: [id], onDelete: Cascade)

  @@index([simulation_id])
  @@index([timestamp])
  @@map("simulation_results")
}

// Tabela de Logs de Notifica√ß√£o
model NotificationLog {
  id             String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  notification_id String
  user_id        String?
  status         String   // sent, failed, pending
  error_message  String?
  channel        String?
  sent_at        DateTime? @db.Timestamp(6)
  created_at     DateTime @default(now()) @db.Timestamp(6)

  notification Notification @relation(fields: [notification_id], references: [id], onDelete: Cascade)
  user         User?        @relation(fields: [user_id], references: [id], onDelete: SetNull)

  @@index([notification_id])
  @@index([user_id])
  @@index([status])
  @@map("notification_logs")
}
