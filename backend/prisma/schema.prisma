generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         String                    @id @default(dbgenerated("(gen_random_uuid())::text"))
  email                      String                    @unique
  username                   String                    @unique
  first_name                 String?
  last_name                  String?
  password_hash              String?
  social_provider            String?
  social_id                  String?
  ln_markets_api_key         String?
  ln_markets_api_secret      String?
  last_activity_at           DateTime?                 @db.Timestamp(6)
  created_at                 DateTime                  @default(now()) @db.Timestamp(6)
  updated_at                 DateTime                  @default(now()) @db.Timestamp(6)
  is_active                  Boolean                   @default(true)
  session_expires_at         DateTime?                 @db.Timestamp(6)
  email_verified             Boolean?                  @default(false)
  email_verification_token   String?
  email_verification_expires DateTime?                 @db.Timestamp(6)
  password_reset_token       String?
  password_reset_expires     DateTime?                 @db.Timestamp(6)
  two_factor_enabled         Boolean?                  @default(false)
  two_factor_secret          String?
  two_factor_backup_codes    Json?
  login_attempts             Int?                      @default(0)
  locked_until               DateTime?                 @db.Timestamp(6)
  last_login_ip              String?
  last_login_user_agent      String?
  last_login_at              DateTime?                 @db.Timestamp(6)
  ln_markets_passphrase      String?                   @db.VarChar(255)
  plan_type                  PlanType                  @default(free)
  preferences                Json?
  bio                        String?
  birthday                   DateTime?                 @db.Date
  website                    String?                   @db.VarChar(255)
  risk_limits                Json?
  risk_profile               String?                   @default("moderate") @db.VarChar(50)
  email_marketing_consent    Boolean?                  @default(false)
  email_marketing_consent_at DateTime?                 @db.Timestamp(6)
  marketing_preferences      Json?
  admin_user                 AdminUser?
  automations                Automation[]
  backtest_reports           BacktestReport[]
  notifications              Notification[]
  payments                   Payment[]
  refresh_tokens             RefreshToken[]
  security_audit_logs        SecurityAuditLog[]
  security_configs_updated   SecurityConfig[]          @relation("SecurityConfigUpdatedBy")
  trade_logs                 TradeLog[]
  user_coupons               UserCoupon[]              @relation("UserCouponRelation")
  audit_logs                 AuditLog[]
  notification_logs          NotificationLog[]
  order_confirmations        OrderConfirmation[]
  registration_progress      RegistrationProgress?
  simulations                Simulation[]
  trading_logs               TradingLog[]
  exchange_accounts          UserExchangeAccounts[]
  exchange_credentials       UserExchangeCredentials[]
  userPreferences            UserPreferences?
  upgrades_made              UserUpgradeHistory[]      @relation("AdminUpgradeHistory")
  upgrade_history            UserUpgradeHistory[]      @relation("UserUpgradeHistory")

  @@index([email], map: "idx_user_email")
  @@index([email_verification_token], map: "idx_user_email_verification_token")
  @@index([password_reset_token], map: "idx_user_password_reset_token")
}

model Automation {
  id                       String                @id @default(dbgenerated("(gen_random_uuid())::text"))
  user_id                  String
  user_exchange_account_id String                // ðŸ”— FASE 6.1.2: Campo obrigatÃ³rio para multi-account
  type                     String
  config                   Json
  is_active                Boolean               @default(true)
  status                   String                @default("active")
  risk_level               String?
  plan_type                PlanType?
  created_at               DateTime              @default(now()) @db.Timestamp(6)
  updated_at               DateTime              @default(now()) @db.Timestamp(6)
  user_exchange_account    UserExchangeAccounts  @relation(fields: [user_exchange_account_id], references: [id])
  user                     User                  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  automation_type          AutomationType?       @relation(fields: [type], references: [slug])
  trade_logs               TradeLog[]

  @@index([user_id], map: "idx_automation_user_id")
  @@index([user_exchange_account_id], map: "idx_automation_account_id")
  @@index([type])
  @@index([status])
  @@index([risk_level])
  @@index([plan_type])
}

model TradeLog {
  id            String      @id @default(dbgenerated("(gen_random_uuid())::text"))
  user_id       String
  automation_id String?
  /// LN Markets trade ID
  trade_id      String
  status        String
  action        String?
  plan_type     PlanType?
  pnl           Float?
  amount        Float?
  price         Float?
  error_message String?
  executed_at   DateTime    @db.Timestamp(6)
  created_at    DateTime    @default(now()) @db.Timestamp(6)
  automation    Automation? @relation(fields: [automation_id], references: [id], onUpdate: NoAction)
  user          User        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([automation_id], map: "idx_tradelog_automation_id")
  @@index([user_id], map: "idx_tradelog_user_id")
  @@index([status])
  @@index([action])
  @@index([plan_type])
  @@index([executed_at])
}

model AutomationType {
  id          String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  name        String   @unique
  slug        String   @unique
  description String?
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  automations Automation[]

  @@index([slug])
  @@index([is_active])
}

model Notification {
  id             String            @id @default(dbgenerated("(gen_random_uuid())::text"))
  user_id        String
  type           String
  is_enabled     Boolean           @default(true)
  channel_config Json
  created_at     DateTime          @default(now()) @db.Timestamp(6)
  updated_at     DateTime          @default(now()) @db.Timestamp(6)
  user           User              @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  logs           NotificationLog[]

  @@index([user_id], map: "idx_notification_user_id")
}

model Payment {
  id                String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  user_id           String
  amount_sats       Int
  lightning_invoice String
  status            String
  paid_at           DateTime? @db.Timestamp(6)
  created_at        DateTime  @default(now()) @db.Timestamp(6)
  updated_at        DateTime  @default(now()) @db.Timestamp(6)
  plan_type         PlanType
  description       String?
  expires_at        DateTime? @db.Timestamp(6)
  payment_hash      String?
  preimage          String?
  expiry_seconds    Int?
  payment_method    String?
  amount            Float?
  user              User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id], map: "idx_payment_user_id")
  @@index([payment_hash])
  @@index([expires_at])
  @@index([status])
  @@index([payment_method])
  @@index([plan_type])
  @@index([created_at])
}

model BacktestReport {
  id             String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  user_id        String
  config         Json
  result         Json
  status         String    @default("pending")
  strategy       String?
  plan_type      PlanType?
  execution_time Int?
  created_at     DateTime  @default(now()) @db.Timestamp(6)
  updated_at     DateTime  @default(now()) @db.Timestamp(6)
  completed_at   DateTime? @db.Timestamp(6)
  user           User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id], map: "idx_backtestreport_user_id")
  @@index([status])
  @@index([strategy])
  @@index([plan_type])
  @@index([created_at])
}

model AdminUser {
  id         String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  user_id    String   @unique
  role       String
  created_at DateTime @default(now()) @db.Timestamp(6)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id], map: "idx_adminuser_user_id")
}

model Coupon {
  id                  String       @id @default(dbgenerated("(gen_random_uuid())::text"))
  code                String       @unique
  usage_limit         Int?         @default(1)
  used_count          Int?         @default(0)
  expires_at          DateTime?    @db.Timestamp(6)
  value_type          String
  value_amount        Int
  time_type           String
  time_days           Int?
  is_active           Boolean      @default(true)
  description         String?
  created_by          String?
  total_revenue_saved Int          @default(0)
  new_users_count     Int          @default(0)
  conversion_rate     Float        @default(0)
  created_at          DateTime     @default(now()) @db.Timestamp(6)
  updated_at          DateTime     @default(now()) @db.Timestamp(6)
  plan_type           PlanType
  user_coupons        UserCoupon[] @relation("CouponUserRelation")

  @@index([code], map: "idx_coupon_code")
  @@index([is_active], map: "idx_coupon_active")
  @@index([created_at], map: "idx_coupon_created")
}

model SystemAlert {
  id         String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  message    String
  severity   String
  is_global  Boolean  @default(false)
  created_at DateTime @default(now()) @db.Timestamp(6)
}

/// Join table for User-Coupon N:N relationship
/// Each user can redeem a coupon once
model UserCoupon {
  user_id   String
  coupon_id String
  used_at   DateTime @default(now()) @db.Timestamp(6)
  coupon    Coupon   @relation("CouponUserRelation", fields: [coupon_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user      User     @relation("UserCouponRelation", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, coupon_id])
}

/// Modelo para rastrear mÃ©tricas de cupons
model CouponAnalytics {
  id                 String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  coupon_id          String
  date               DateTime @db.Timestamp(6)
  views_count        Int      @default(0)
  clicks_count       Int      @default(0)
  uses_count         Int      @default(0)
  new_users_count    Int      @default(0)
  revenue_saved      Int      @default(0)
  conversion_rate    Float    @default(0)
  click_through_rate Float    @default(0)
  created_at         DateTime @default(now()) @db.Timestamp(6)

  @@unique([coupon_id, date], map: "idx_coupon_analytics_unique")
  @@index([coupon_id], map: "idx_coupon_analytics_coupon")
  @@index([date], map: "idx_coupon_analytics_date")
}

model MenuItem {
  id          String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  name        String
  mobileName  String?
  href        String
  icon        String
  order       Int
  isActive    Boolean  @default(true)
  isVisible   Boolean  @default(true)
  target      String   @default("_self")
  badge       String?
  badgeColor  String?
  description String?
  menuTypeId  String
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  menuType    MenuType @relation(fields: [menuTypeId], references: [id])

  @@index([menuTypeId])
  @@index([order])
  @@index([isActive, isVisible])
}

model MenuType {
  id          String     @id @default(dbgenerated("(gen_random_uuid())::text"))
  name        String     @unique
  displayName String
  description String?
  isActive    Boolean    @default(true)
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  menuItems   MenuItem[]
}

model SystemConfig {
  id          String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  key         String   @unique
  value       String
  type        String   @default("string")
  description String?
  isActive    Boolean  @default(true)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)

  @@index([key])
  @@index([isActive])
}

model UserUpgradeHistory {
  id             String   @id @default(dbgenerated("gen_random_uuid()"))
  user_id        String
  old_plan       String
  new_plan       String
  reason         String
  effective_date DateTime @db.Timestamp(6)
  upgraded_by    String
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @db.Timestamp(6)
  admin          User     @relation("AdminUpgradeHistory", fields: [upgraded_by], references: [id], onDelete: SetNull)
  user           User     @relation("UserUpgradeHistory", fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([upgraded_by])
  @@index([created_at])
  @@index([new_plan])
  @@map("user_upgrade_history")
}

model DashboardCard {
  id            String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  key           String   @unique
  title         String
  description   String?
  icon          String?
  category      String?
  order_index   Int      @default(0)
  is_active     Boolean  @default(true)
  is_admin_only Boolean  @default(false)
  created_at    DateTime @default(now()) @db.Timestamp(6)
  updated_at    DateTime @default(now()) @db.Timestamp(6)
  created_by    String?
  updated_by    String?

  @@index([category])
  @@index([is_active])
  @@index([order_index])
  @@map("dashboard_cards")
}

model TooltipConfig {
  id               String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  card_key         String   @unique
  tooltip_text     String
  tooltip_position String   @default("top")
  is_enabled       Boolean  @default(true)
  created_at       DateTime @default(now()) @db.Timestamp(6)
  updated_at       DateTime @default(now()) @db.Timestamp(6)
  created_by       String?
  updated_by       String?

  @@index([card_key])
  @@index([is_enabled])
  @@map("tooltip_configs")
}

model Plan {
  id                String      @id @default(dbgenerated("(gen_random_uuid())::text"))
  name              String      @unique
  slug              String      @unique
  description       String?
  price_sats        Int         @default(0)
  price_monthly     Int?
  price_yearly      Int?
  features          Json?
  is_active         Boolean     @default(true)
  sort_order        Int         @default(0)
  stripe_price_id   String?
  has_api_access    Boolean     @default(false)
  has_advanced      Boolean     @default(false)
  has_priority      Boolean     @default(false)
  max_notifications Int         @default(0)
  created_at        DateTime    @default(now()) @db.Timestamp(6)
  updated_at        DateTime    @default(now()) @db.Timestamp(6)
  plan_limits       PlanLimits[]

  @@index([slug])
  @@index([is_active])
  @@index([sort_order])
  @@map("plans")
}

model PlanLimits {
  id                    String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  plan_id               String   @unique
  max_exchange_accounts Int      @default(1)
  max_automations       Int      @default(5)
  max_indicators        Int      @default(10)
  max_simulations       Int      @default(3)
  max_backtests         Int      @default(5)
  created_at            DateTime @default(now()) @db.Timestamp(6)
  updated_at            DateTime @default(now()) @db.Timestamp(6)
  plan                  Plan     @relation(fields: [plan_id], references: [id], onDelete: Cascade)

  @@index([plan_id])
  @@map("plan_limits")
}

model Simulation {
  id              String             @id @default(dbgenerated("(gen_random_uuid())::text"))
  user_id         String
  name            String
  description     String?
  config          Json
  status          String             @default("pending")
  simulation_type String?
  automation_type String?
  price_scenario  String?
  duration        Int?
  initial_price   Float?
  progress        Float?             @default(0)
  started_at      DateTime?          @db.Timestamp(6)
  created_at      DateTime           @default(now()) @db.Timestamp(6)
  updated_at      DateTime           @default(now()) @db.Timestamp(6)
  completed_at    DateTime?          @db.Timestamp(6)
  plan_type       PlanType?
  results         SimulationResult[]
  user            User               @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([status])
  @@index([simulation_type])
  @@index([automation_type])
  @@index([plan_type])
  @@map("simulations")
}

model SimulationResult {
  id              String     @id @default(dbgenerated("(gen_random_uuid())::text"))
  simulation_id   String
  result_data     Json
  timestamp       DateTime   @default(now()) @db.Timestamp(6)
  action_type     String?
  success_rate    Float?
  pnl             Float?
  account_balance Float?
  created_at      DateTime   @default(now()) @db.Timestamp(6)
  simulation      Simulation @relation(fields: [simulation_id], references: [id], onDelete: Cascade)

  @@index([simulation_id])
  @@index([timestamp])
  @@map("simulation_results")
}

model NotificationLog {
  id              String       @id @default(dbgenerated("(gen_random_uuid())::text"))
  notification_id String
  user_id         String?
  status          String
  error_message   String?
  channel         String?
  sent_at         DateTime?    @db.Timestamp(6)
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  notification    Notification @relation(fields: [notification_id], references: [id], onDelete: Cascade)
  user            User?        @relation(fields: [user_id], references: [id])

  @@index([notification_id])
  @@index([user_id])
  @@index([status])
  @@map("notification_logs")
}

model SecurityConfig {
  id              String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  key             String   @unique
  value           String
  description     String?
  category        String   @default("authentication")
  is_active       Boolean  @default(true)
  created_at      DateTime @default(now()) @db.Timestamp(6)
  updated_at      DateTime @default(now()) @db.Timestamp(6)
  updated_by      String?
  updated_by_user User?    @relation("SecurityConfigUpdatedBy", fields: [updated_by], references: [id])

  @@map("SecurityConfig")
}

model SecurityAuditLog {
  id         String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  user_id    String?
  action     String
  resource   String?
  ip_address String?
  user_agent String?
  success    Boolean  @default(true)
  details    Json?
  created_at DateTime @default(now()) @db.Timestamp(6)
  user       User?    @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@index([action])
  @@index([created_at])
  @@map("SecurityAuditLog")
}

model RefreshToken {
  id           String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  user_id      String
  token        String    @unique
  expires_at   DateTime  @db.Timestamp(6)
  is_revoked   Boolean   @default(false)
  ip_address   String?
  user_agent   String?
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  last_used_at DateTime? @db.Timestamp(6)
  user         User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([expires_at])
  @@index([is_revoked])
  @@map("RefreshToken")
}

model NotificationTemplate {
  id          String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  name        String
  description String?
  channel     String
  category    String
  template    String
  variables   Json?
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  created_by  String?

  @@index([channel])
  @@index([category])
  @@index([is_active])
  @@map("notification_templates")
}

model SystemReport {
  id           String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  type         String
  status       String
  title        String
  description  String?
  config       Json?
  file_path    String?
  file_size    Int?
  generated_at DateTime? @db.Timestamp(6)
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  updated_at   DateTime  @default(now()) @db.Timestamp(6)
  created_by   String?

  @@index([type])
  @@index([status])
  @@index([created_at])
  @@map("system_reports")
}

model AuditLog {
  id          String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  user_id     String?
  action      String
  resource    String?
  resource_id String?
  old_values  Json?
  new_values  Json?
  ip_address  String?
  user_agent  String?
  severity    String   @default("info")
  details     Json?
  created_at  DateTime @default(now()) @db.Timestamp(6)
  user        User?    @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@index([action])
  @@index([resource])
  @@index([severity])
  @@index([created_at])
  @@map("audit_logs")
}

model RouteRedirect {
  id            String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  from_path     String    @unique @db.VarChar(500)
  to_path       String    @db.VarChar(500)
  redirect_type String    @default("temporary") @db.VarChar(20)
  is_active     Boolean   @default(true)
  description   String?
  created_by    String?
  created_at    DateTime  @default(now()) @db.Timestamp(6)
  updated_at    DateTime  @default(now()) @db.Timestamp(6)
  expires_at    DateTime? @db.Timestamp(6)

  @@index([is_active])
  @@index([redirect_type])
  @@index([created_at])
  @@map("route_redirects")
}

model OrderConfirmation {
  id                String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId            String
  orderType         String
  status            String    @default("pending")
  tradeParams       String?
  tradeId           String?
  updateValue       Decimal?
  confirmationToken String?
  expiresAt         DateTime  @db.Timestamp(6)
  createdAt         DateTime  @default(now()) @db.Timestamp(6)
  confirmedAt       DateTime? @db.Timestamp(6)
  rejectedAt        DateTime? @db.Timestamp(6)
  rejectionReason   String?
  user              User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([expiresAt])
  @@map("order_confirmations")
}

model TradingLog {
  id         String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId     String
  action     String
  tradeId    String?
  market     String?
  side       String?
  quantity   Decimal?
  price      Decimal?
  leverage   Int?
  stoploss   Decimal?
  takeprofit Decimal?
  oldValue   Decimal?
  newValue   Decimal?
  reason     String?
  metadata   Json?
  timestamp  DateTime @default(now()) @db.Timestamp(6)
  ipAddress  String?
  userAgent  String?
  sessionId  String?
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([timestamp])
  @@index([tradeId])
  @@map("trading_logs")
}

model RateLimitConfig {
  id                     String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  environment            String
  endpointType           String
  maxRequests            Int
  windowMs               Int
  message                String?
  skipSuccessfulRequests Boolean  @default(false)
  isActive               Boolean  @default(true)
  createdAt              DateTime @default(now()) @db.Timestamp(6)
  updatedAt              DateTime @default(now()) @db.Timestamp(6)
  createdBy              String?
  updatedBy              String?
  metadata               Json?

  @@unique([environment, endpointType])
  @@index([environment])
  @@index([endpointType])
  @@index([isActive])
  @@map("rate_limit_configs")
}

model RegistrationProgress {
  id               String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  user_id          String    @unique
  current_step     String    @default("personal_data")
  completed_steps  Json      @default("[]")
  personal_data    Json?
  selected_plan    String?
  payment_data     Json?
  credentials_data Json?
  coupon_code      String?
  session_token    String?
  expires_at       DateTime? @db.Timestamp(6)
  created_at       DateTime  @default(now()) @db.Timestamp(6)
  updated_at       DateTime  @default(now()) @db.Timestamp(6)
  user             User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([current_step])
  @@index([session_token])
  @@index([expires_at])
  @@map("registration_progress")
}

model Exchange {
  id               String                    @id @default(dbgenerated("(gen_random_uuid())::text"))
  name             String                    @unique
  slug             String                    @unique
  description      String?
  website          String?
  logo_url         String?
  is_active        Boolean                   @default(true)
  api_version      String?
  created_at       DateTime                  @default(now()) @db.Timestamp(6)
  updated_at       DateTime                  @default(now()) @db.Timestamp(6)
  credential_types ExchangeCredentialType[]
  user_accounts    UserExchangeAccounts[]
  user_credentials UserExchangeCredentials[]

  @@index([slug])
  @@index([is_active])
  @@map("exchanges")
}

model ExchangeCredentialType {
  id          String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  exchange_id String
  name        String
  field_name  String
  field_type  String   @default("text")
  is_required Boolean  @default(true)
  description String?
  order       Int      @default(0)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  exchange    Exchange @relation(fields: [exchange_id], references: [id], onDelete: Cascade)

  @@unique([exchange_id, field_name])
  @@index([exchange_id])
  @@index([is_required])
  @@map("exchange_credential_types")
}

model UserExchangeCredentials {
  id          String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  user_id     String
  exchange_id String
  credentials Json
  is_active   Boolean   @default(true)
  is_verified Boolean   @default(false)
  last_test   DateTime? @db.Timestamp(6)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  exchange    Exchange  @relation(fields: [exchange_id], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, exchange_id])
  @@index([user_id])
  @@index([exchange_id])
  @@index([is_active])
  @@index([is_verified])
  @@map("user_exchange_credentials")
}

model UserExchangeAccounts {
  id           String       @id @default(dbgenerated("(gen_random_uuid())::text"))
  user_id      String
  exchange_id  String
  account_name String       @default("Account 01")
  credentials  Json
  is_active    Boolean      @default(false)
  is_verified  Boolean      @default(false)
  last_test    DateTime?    @db.Timestamp(6)
  created_at   DateTime     @default(now()) @db.Timestamp(6)
  updated_at   DateTime     @default(now()) @db.Timestamp(6)
  automations  Automation[]
  exchange     Exchange     @relation(fields: [exchange_id], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([exchange_id])
  @@index([is_active])
  @@index([is_verified])
  @@map("user_exchange_accounts")
}

model UserPreferences {
  id               String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId           String   @unique
  indicatorConfigs String
  lastUpdated      DateTime @default(now()) @db.Timestamp(6)
  version          String   @default("1.0.0")
  created_at       DateTime @default(now()) @db.Timestamp(6)
  updated_at       DateTime @default(now()) @db.Timestamp(6)
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([lastUpdated])
  @@map("user_preferences")
}

enum PlanType {
  free
  basic
  advanced
  pro
  lifetime
}
