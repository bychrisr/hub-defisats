#!/bin/bash

# Script de Manuten√ß√£o Autom√°tica da Documenta√ß√£o
# Hub DeFiSats - Sistema de Documenta√ß√£o
# Vers√£o: 1.0.0

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configura√ß√µes
DOCS_DIR="/home/bychrisr/projects/hub-defisats/.system/docs"
SYSTEM_DIR="/home/bychrisr/projects/hub-defisats/.system"
LOG_FILE="${DOCS_DIR}/scripts/maintenance.log"

# Fun√ß√£o para logging
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
    echo -e "$1"
}

# Header
echo -e "${BLUE}üîß Script de Manuten√ß√£o da Documenta√ß√£o${NC}"
echo -e "${BLUE}======================================${NC}"
echo ""

# 1. Validar Links Internos
log "${YELLOW}üîç Validando links internos...${NC}"
if "${DOCS_DIR}/scripts/validate-links.sh" > /dev/null 2>&1; then
    log "${GREEN}‚úÖ Links validados com sucesso${NC}"
else
    log "${RED}‚ùå Encontrados links quebrados - execute validate-links.sh para detalhes${NC}"
fi

# 2. Atualizar Estat√≠sticas no README
log "${YELLOW}üìä Atualizando estat√≠sticas...${NC}"

# Contar arquivos
TOTAL_FILES=$(find "$DOCS_DIR" -name "*.md" | wc -l)
TOTAL_DIRS=$(find "$DOCS_DIR" -type d | grep -v "^${DOCS_DIR}$" | wc -l)
TOTAL_LINES=$(find "$DOCS_DIR" -name "*.md" -exec wc -l {} + 2>/dev/null | tail -1 | awk '{print $1}')
TOTAL_SIZE=$(du -sh "$SYSTEM_DIR" | awk '{print $1}')

# Atualizar README.md com estat√≠sticas
README_FILE="${DOCS_DIR}/README.md"
if [ -f "$README_FILE" ]; then
    # Backup do README
    cp "$README_FILE" "${README_FILE}.bak"
    
    # Atualizar se√ß√£o de estat√≠sticas
    sed -i "s/- \*\*üìÅ Total de diret√≥rios\*\*:.*/- **üìÅ Total de diret√≥rios**: $TOTAL_DIRS/" "$README_FILE"
    sed -i "s/- \*\*üìÑ Total de arquivos\*\*:.*/- **üìÑ Total de arquivos**: $TOTAL_FILES documentos/" "$README_FILE"
    sed -i "s/- \*\*üìä Total de linhas\*\*:.*/- **üìä Total de linhas**: $TOTAL_LINES linhas/" "$README_FILE"
    sed -i "s/- \*\*üíæ Tamanho total\*\*:.*/- **üíæ Tamanho total**: $TOTAL_SIZE/" "$README_FILE"
    
    log "${GREEN}‚úÖ Estat√≠sticas atualizadas no README.md${NC}"
else
    log "${RED}‚ùå README.md n√£o encontrado${NC}"
fi

# 3. Verificar Arquivos √ìrf√£os
log "${YELLOW}üîç Verificando arquivos √≥rf√£os...${NC}"
ORPHAN_COUNT=0

# Procurar por arquivos .md que n√£o est√£o referenciados
find "$DOCS_DIR" -name "*.md" | while read -r file; do
    filename=$(basename "$file")
    # Verificar se o arquivo √© referenciado em algum lugar
    if ! grep -r "$filename" "$DOCS_DIR" --exclude="$filename" > /dev/null 2>&1; then
        if [ "$filename" != "README.md" ] && [ "$filename" != "NAVIGATION_GUIDE.md" ] && [ "$filename" != "TEAM_PRESENTATION.md" ]; then
            echo "‚ö†Ô∏è  Arquivo √≥rf√£o encontrado: $file"
            ((ORPHAN_COUNT++))
        fi
    fi
done

if [ $ORPHAN_COUNT -eq 0 ]; then
    log "${GREEN}‚úÖ Nenhum arquivo √≥rf√£o encontrado${NC}"
else
    log "${YELLOW}‚ö†Ô∏è  Encontrados $ORPHAN_COUNT arquivos √≥rf√£os${NC}"
fi

# 4. Verificar Formata√ß√£o Markdown
log "${YELLOW}üìù Verificando formata√ß√£o Markdown...${NC}"
FORMAT_ISSUES=0

find "$DOCS_DIR" -name "*.md" | while read -r file; do
    # Verificar se arquivo tem t√≠tulo (linha come√ßando com #)
    if ! head -10 "$file" | grep -q "^# "; then
        echo "‚ö†Ô∏è  Arquivo sem t√≠tulo principal: $file"
        ((FORMAT_ISSUES++))
    fi
    
    # Verificar se arquivo tem conte√∫do m√≠nimo
    if [ $(wc -l < "$file") -lt 5 ]; then
        echo "‚ö†Ô∏è  Arquivo muito pequeno (< 5 linhas): $file"
        ((FORMAT_ISSUES++))
    fi
done

if [ $FORMAT_ISSUES -eq 0 ]; then
    log "${GREEN}‚úÖ Formata√ß√£o Markdown OK${NC}"
else
    log "${YELLOW}‚ö†Ô∏è  Encontrados $FORMAT_ISSUES problemas de formata√ß√£o${NC}"
fi

# 5. Atualizar Timestamp de √öltima Manuten√ß√£o
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
echo "# √öltima Manuten√ß√£o: $TIMESTAMP" > "${DOCS_DIR}/scripts/last-maintenance.txt"

# 6. Gerar Relat√≥rio de Manuten√ß√£o
REPORT_FILE="${DOCS_DIR}/scripts/maintenance-report.md"
cat > "$REPORT_FILE" << EOF
# Relat√≥rio de Manuten√ß√£o da Documenta√ß√£o

**Data**: $(date '+%Y-%m-%d %H:%M:%S')

## üìä Estat√≠sticas Atuais

- **üìÅ Diret√≥rios**: $TOTAL_DIRS
- **üìÑ Arquivos**: $TOTAL_FILES
- **üìä Linhas**: $TOTAL_LINES
- **üíæ Tamanho**: $TOTAL_SIZE

## ‚úÖ Verifica√ß√µes Realizadas

- [x] Valida√ß√£o de links internos
- [x] Atualiza√ß√£o de estat√≠sticas
- [x] Verifica√ß√£o de arquivos √≥rf√£os
- [x] Verifica√ß√£o de formata√ß√£o Markdown
- [x] Atualiza√ß√£o de timestamps

## üéØ Status Geral

- **Links**: $(if "${DOCS_DIR}/scripts/validate-links.sh" > /dev/null 2>&1; then echo "‚úÖ OK"; else echo "‚ùå Problemas"; fi)
- **√ìrf√£os**: $(if [ $ORPHAN_COUNT -eq 0 ]; then echo "‚úÖ Nenhum"; else echo "‚ö†Ô∏è $ORPHAN_COUNT encontrados"; fi)
- **Formata√ß√£o**: $(if [ $FORMAT_ISSUES -eq 0 ]; then echo "‚úÖ OK"; else echo "‚ö†Ô∏è $FORMAT_ISSUES problemas"; fi)

## üìù Pr√≥ximas A√ß√µes

1. Revisar arquivos √≥rf√£os identificados
2. Corrigir problemas de formata√ß√£o
3. Validar links quebrados (se houver)

---
*Relat√≥rio gerado automaticamente pelo script update-docs.sh*
EOF

log "${GREEN}‚úÖ Relat√≥rio de manuten√ß√£o gerado: $REPORT_FILE${NC}"

# 7. Resumo Final
echo ""
echo -e "${BLUE}üìã Resumo da Manuten√ß√£o${NC}"
echo -e "${BLUE}=====================${NC}"
echo -e "üìÅ Diret√≥rios: ${GREEN}$TOTAL_DIRS${NC}"
echo -e "üìÑ Arquivos: ${GREEN}$TOTAL_FILES${NC}"
echo -e "üìä Linhas: ${GREEN}$TOTAL_LINES${NC}"
echo -e "üíæ Tamanho: ${GREEN}$TOTAL_SIZE${NC}"
echo ""
echo -e "${GREEN}‚úÖ Manuten√ß√£o conclu√≠da com sucesso!${NC}"
echo -e "üìÑ Log: $LOG_FILE"
echo -e "üìã Relat√≥rio: $REPORT_FILE"

log "${GREEN}üéâ Manuten√ß√£o da documenta√ß√£o conclu√≠da${NC}"
