version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: hubdefisats-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - hubdefisats-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: hubdefisats-redis-prod
    volumes:
      - redis_data:/data
    networks:
      - hubdefisats-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: hubdefisats-backend-prod
    environment:
      NODE_ENV: production
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      JWT_SECRET: ${JWT_SECRET}
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      LN_MARKETS_API_URL: ${LN_MARKETS_API_URL}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      LNBITS_URL: ${LNBITS_URL}
      LNBITS_ADMIN_KEY: ${LNBITS_ADMIN_KEY}
      SENTRY_DSN: ${SENTRY_DSN}
      PORT: 3000
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hubdefisats-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: hubdefisats-frontend-prod
    environment:
      VITE_API_URL: ${VITE_API_URL}
    ports:
      - "3001:80"
    depends_on:
      - backend
    networks:
      - hubdefisats-network
    restart: unless-stopped

  # Workers
  margin-monitor:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: hubdefisats-margin-monitor-prod
    environment:
      NODE_ENV: production
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      LN_MARKETS_API_URL: ${LN_MARKETS_API_URL}
      SENTRY_DSN: ${SENTRY_DSN}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hubdefisats-network
    restart: unless-stopped
    command: npm run worker:margin-monitor

  automation-executor:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: hubdefisats-automation-executor-prod
    environment:
      NODE_ENV: production
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      LN_MARKETS_API_URL: ${LN_MARKETS_API_URL}
      SENTRY_DSN: ${SENTRY_DSN}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hubdefisats-network
    restart: unless-stopped
    command: npm run worker:automation-executor

  notification-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: hubdefisats-notification-worker-prod
    environment:
      NODE_ENV: production
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      EVOLUTION_API_URL: ${EVOLUTION_API_URL}
      EVOLUTION_API_KEY: ${EVOLUTION_API_KEY}
      SENTRY_DSN: ${SENTRY_DSN}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hubdefisats-network
    restart: unless-stopped
    command: npm run worker:notification

  payment-validator:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: hubdefisats-payment-validator-prod
    environment:
      NODE_ENV: production
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      LNBITS_URL: ${LNBITS_URL}
      LNBITS_ADMIN_KEY: ${LNBITS_ADMIN_KEY}
      SENTRY_DSN: ${SENTRY_DSN}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hubdefisats-network
    restart: unless-stopped
    command: npm run worker:payment-validator

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: hubdefisats-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infra/certs:/etc/nginx/certs
    depends_on:
      - backend
      - frontend
    networks:
      - hubdefisats-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  hubdefisats-network:
    driver: bridge
